#+TITLE: Emacs Literate Package Additions
#+AUTHOR: Rohit Goswami (HaoZeke) <rohit.goswami@aol.com>
#+DATE: 2020:04:09
#+HTML_LINK_HOME: https://dotdoom.rgoswami.me
#+HTML_HEAD_EXTRA: <script> window.goatcounter = { path: '/dotdoomhome', }; </script>
#+HTML_HEAD_EXTRA: <script data-goatcounter="https://rgoswami.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
#+PROPERTY: header-args+ :tangle (concat doom-private-dir "packages.el")
#+PROPERTY: header-args+ :comments link
#+STARTUP: outline
#+OPTIONS: toc:nil

# Now we set this with STARTUP
# These can be set per subtree.
# :PROPERTIES:
# :VISIBILITY: children
# :END:

** Table of Contents :TOC_3_gh:noexport:
  - [[#about-this-file][About this file]]
    - [[#about-that-toc][About that TOC..]]
    - [[#the-properties][The properties]]
  - [[#os-specific-packages][OS Specific Packages]]
    - [[#macos][MacOS]]
  - [[#aesthetic-packages][Aesthetic Packages]]
    - [[#dired-icons][Dired Icons]]
    - [[#wakatime][Wakatime]]
  - [[#later-magit-additions][LATER Magit Additions]]
    - [[#magit-delta][Magit Delta]]
  - [[#key-chords-and-keybindings][Key Chords and Keybindings]]
  - [[#evil-colemak][Evil Colemak]]
  - [[#firestarter][Firestarter]]
  - [[#org-additions][Org Additions]]
    - [[#mermaid][Mermaid]]
    - [[#org-download][Org Download]]
    - [[#later-org-drill][LATER Org Drill]]
    - [[#org-protocol-updates][Org Protocol Updates]]
    - [[#org-noter][Org Noter]]
    - [[#org-ref][Org Ref]]
    - [[#org-mind-map][Org Mind Map]]
    - [[#org-rifle][Org Rifle]]
    - [[#org-async][Org Async]]
    - [[#anki-mode][Anki Mode]]
    - [[#org-re-reveal-extensions][Org Re-Reveal Extensions]]
    - [[#org-roam-bibtex][Org Roam Bibtex]]
    - [[#org-gcal][Org GCal]]
    - [[#citeproc-org][Citeproc Org]]
  - [[#dockerfile-mode][Dockerfile Mode]]
  - [[#reference-management][Reference Management]]
  - [[#syntax-highlighting][Syntax Highlighting]]
    - [[#sphinx-and-rst][Sphinx and RsT]]
    - [[#cpp-additions][CPP Additions]]
    - [[#quarto-mode][Quarto Mode]]
    - [[#meson-mode][Meson Mode]]
    - [[#tup-mode][Tup Mode]]
    - [[#saltstack-mode][SaltStack Mode]]
    - [[#pkgbuild-mode][PKGBUILD Mode]]
    - [[#lammps-mode][LAMMPS Mode]]
    - [[#pug-mode][Pug Mode]]
    - [[#nix-mode][Nix Mode]]
    - [[#vim-mode][VIM mode]]
    - [[#jvm-languages][JVM Languages]]
    - [[#systemd-mode][Systemd Mode]]
    - [[#dart-mode][Dart Mode]]
    - [[#wolfram-mode][Wolfram Mode]]
    - [[#polymode][Polymode]]
    - [[#snakemake][Snakemake]]
  - [[#matrix-clients][Matrix Clients]]
  - [[#flycheck-additions][Flycheck Additions]]
    - [[#melpa-helper][MELPA Helper]]
  - [[#snippets][Snippets]]
    - [[#doom][Doom]]
    - [[#standard][Standard]]
  - [[#math-support][Math support]]

** About this file
This is an Emacs literate package file and is meant to compliment [[file:config.org][my
configuration]], as well as [[file:index.html][the init.el]]. It contains the basic structure along
with some data about each package and why it's needed. This is to be used in
tandem with the ~define-package!~ function in ~config.org~.

Since it's primarily aimed at ~doom-emacs~ let's add their comments.

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; ~/.config/doom/packages.el
#+END_SRC

*** About that TOC..
So as mentioned [[https://github.com/snosov1/toc-org/issues/35][here]] there is trouble when ~org-export~ tries to create files
while keeping the ~org-toc~ tag.

It's not really a problem since ~org-export~ actually generates a TOC for the
files anyway.
*** The properties
Basically, the properties set imply that the file is to be tangled for every
block and moreover the output directory is the ~doom-private-dir~. It's
practically self explanatory but still. 

The filename is determined by the ~SRC~ block languages.
** OS Specific Packages
*** MacOS
Paths are a nightmare on ~darwin~ systems which necessitates a separate package [[https://github.com/purcell/exec-path-from-shell][for setting things up]].
#+begin_src emacs-lisp :tangle yes
(cond (IS-MAC (package! exec-path-from-shell)
              ))
#+end_src
** Aesthetic Packages
*** Dired Icons
Since treemacs already uses ~all-the-icons~ it is silly to not use them in
dired, from the [[https://github.com/domtronn/all-the-icons.el/wiki][all-the-icons wiki]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! all-the-icons-dired)
#+END_SRC
*** Wakatime
Not exactly aesthetic, but yeah, for stats.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! wakatime-mode)
#+END_SRC
** LATER Magit Additions
These basically allow for TODOs in magit along with enhanced github integration.
These have been added upstream in ~develop~.

#+BEGIN_SRC emacs-lisp :tangle no
(package! magit-org-todos)
(package! magithub)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(package! magit-todos)
#+END_SRC

Actually [[https://github.com/alphapapa/magit-todos][magit-todos]] has been added upstream which collates all ~todo~ items.
There might still be workflows where [[https://github.com/danielma/magit-org-todos.el][magit-org-todos]] is useful since that
displays a global ~todo.org~ file.
*** DONE Magit Delta
CLOSED: [2022-01-21 Fri 10:44]
#+begin_src emacs-lisp :tangle yes
(package! magit-delta)
#+end_src

** DONE Key Chords and Keybindings
It turns out that the switch to [[https://github.com/noctuid/general.el][general.el]] is both inevitable (doom version 2.1)
and very rational. However, I really can't wait. So.. This is a stop gap solution.
#+BEGIN_SRC emacs-lisp :tangle no
(package! general)
#+END_SRC
- [x] Remove when it's merged upstream
** Evil Colemak
I guess I just gave up, [[https://github.com/wbolster/evil-colemak-basics][from here]]. Read about why [[https://rgoswami.me/posts/colemak-dots-refactor/][here]]. The visual line mode setup leverages [[https://github.com/YourFin/evil-better-visual-line/][this package]].
#+begin_src emacs-lisp :tangle yes
(package! evil-colemak-basics)
(package! evil-better-visual-line)
#+end_src

** Firestarter
For running shell commands on-save.

#+BEGIN_SRC emacs-lisp :tangle yes
(package! firestarter)
#+END_SRC

** Org Additions
The new ones need to be covered in the ~config.org~ file with the appropriate
keybindings. The notes are [[https://rgoswami.me/posts/org-note-workflow][described here]].
*** Mermaid
Technically not only an org addition, [[https://mermaid-js.github.io/mermaid/#/][mermaid is kinda]] like a souped up ~ditaa~. Naturally there's an [[https://github.com/arnm/ob-mermaid][org mode addition]].
#+begin_src emacs-lisp :tangle yes
(package! mermaid-mode)
(package! ob-mermaid)
#+end_src
*** Org Download
Now I load it here since I don't use ~+attach~.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-download
  :recipe (:host github
            :repo "abo-abo/org-download"))
#+END_SRC

*** LATER Org Drill
The [[https://bitbucket.org/eeeickythump/org-drill/src][actual repo]] has not been updated in 3 years, so I must use [[https://github.com/hakanserce/org-drill][this fork]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-drill
  :recipe (:host github
            :repo "hakanserce/org-drill"))
#+END_SRC

*** Org Protocol Updates
This needs to be installed specially, [[https://github.com/alphapapa/org-protocol-capture-html][from this repo]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-protocol-capture-html
  :recipe (:host github
           :repo "alphapapa/org-protocol-capture-html"))
#+END_SRC
*** TODO Org Noter
This is sort of more of a ~pdf-tools~ extension and it needs it's own ~biblatex~
setup and stuff as well so this might move into a tree of it's own.

#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-noter)
#+END_SRC

This actually breaks the ~pdf-tools~ bindings.

*** Org Ref
This is probably not the best thing in my current setup.. Now part of the ~init.el~ setup.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-ref)
#+END_SRC
*** Org Mind Map
Not on MELPA yet. From [[https://github.com/theodorewiles/org-mind-map][here]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! org-mind-map
  :recipe (:host github
            :repo "theodorewiles/org-mind-map"))
#+END_SRC
*** Org Rifle
Technically a helm addition. Perfect for monolithic ~org~ files. More details
[[https://github.com/alphapapa/helm-org-rifle][here]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! helm-org-rifle)
#+END_SRC
*** Org Async
We will use this.
#+begin_src emacs-lisp :tangle yes
(package! org-babel-eval-in-repl)
#+end_src
*** Anki Mode
This is put here since it only works with ~org-mode~ stuff.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! anki-editor)
#+END_SRC

*** Org Re-Reveal Extensions
An [[https://gitlab.com/oer/org-re-reveal-ref][extension]] to ~org-re-reveal-ref~. Also [[https://gitlab.com/oer/oer-reveal][this]].
#+begin_src emacs-lisp :tangle yes
(package! org-re-reveal-ref)
#+end_src
*** Org Roam Bibtex
This should be a part of the main ~+roam~ setup, but until then.
#+begin_src emacs-lisp :tangle yes
(package! org-roam-bibtex)
#+end_src
*** Org GCal
This extension seems to be a maintained fork.
#+begin_src emacs-lisp :tangle yes
(package! org-gcal)
#+end_src
*** Citeproc Org
Mainly used with ~ox-hugo~
#+begin_src emacs-lisp :tangle yes
(package! citeproc-org :pin "0fb4c96f48b3055a59a397af24d3f1a82cf77b66")
#+end_src
** Dockerfile Mode
For syntax highlighting and inline builds. [[https://github.com/spotify/dockerfile-mode][From spotify]] weirdly.
~## -*- docker-image-name: "your-image-name-here" -*-~ can be used to specify
the image name.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! dockerfile-mode)
#+END_SRC
** Reference Management
**** Zotero
There are a bunch of ~zotero~ integrations for emacs, most notably, [[https://github.com/vspinu/zotelo][zotelo]], but
they don't seem to be all that well mantained. [[https://github.com/emacsmirror/zotxt][Zotxt]] seems to be updated pretty
often though.

#+BEGIN_SRC emacs-lisp :tangle yes
(package! zotxt)
#+END_SRC
** Syntax Highlighting
These are additionally required to work with the sort of files I use often.
The configuration and settings are as usual in ~config.org~
*** Sphinx and RsT
Though reStructured Text is supported natively, there are some quality of life exporters and packages which should be more useful.
#+begin_src emacs-lisp :tangle yes
(package! ox-rst
  :recipe (:host github
           :repo "msnoigrs/ox-rst"))
(package! sphinx-mode
  :recipe (:host github
           :repo "Fuco1/sphinx-mode"
           :files ("*.el")))
#+end_src
*** CPP Additions
Though the standard ~doom-emacs~ module configuration is a sane set of defaults, there are some glaring omissions, most egregious of is the lack of ~doxygen~ highlighting.
#+begin_src emacs-lisp :tangle yes
(package! highlight-doxygen)
#+end_src
*** Quarto Mode
#+begin_src emacs-lisp :tangle yes
(package! quarto-mode)
#+end_src
*** Meson Mode
Recently gotten into ~meson~ as a nice ~cmake~ alternative for smaller projects (maybe larger ones too).
#+begin_src emacs-lisp :tangle yes
(package! meson-mode)
#+end_src
*** Tup Mode
Because honestly there isn't anything better than [[http://gittup.org/tup/][tup]]. Who doesn't need a build
system which [[http://gittup.org/tup/tup_vs_mordor.html][scales with the eye of Mordor]]?

#+BEGIN_SRC emacs-lisp :tangle yes
(package! tup-mode
:recipe (:host github
           :repo "ejmr/tup-mode"))
#+END_SRC

**** LATER Caveats
The repo is unmaintained so I ought to fork it and take a look into maintaining it.
*** SaltStack Mode
I have recently decided that [[https://saltstack.com/][saltstack]] ought to be used for working on multiple
systems.

#+BEGIN_SRC emacs-lisp :tangle yes
(package! salt-mode
:recipe (:host github
         :repo "glynnforrest/salt-mode"))
#+END_SRC
*** PKGBUILD Mode
No point using ~emacs~ if I can't get highlighting for all my needs. This needs
some extra configuration. +Must figure out if this is well mantained+. The
developer is very responsive to pull requests and the like.

#+BEGIN_SRC emacs-lisp :tangle yes
(package! pkgbuild-mode
  :recipe (:host github
            :repo "juergenhoetzel/pkgbuild-mode"))
#+END_SRC
*** LAMMPS Mode
+This could do with some updates. Will look into this soon. Also it takesunbearably long this way. Must figure out how to stop it from downloading the
whole repo.+
Mantained [[https://github.com/HaoZeke/lammps-mode][by me]] now.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! lammps-mode
  :recipe (:host github
                    :repo "HaoZeke/lammps-mode"))
#+END_SRC
*** Pug Mode
I just like pugs.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! pug-mode)
#+END_SRC
*** Nix Mode
For building more cross-os stuff. This is the [[https://github.com/NixOS/nix-mode][official package]], but will look
into binding and using [[https://github.com/travisbhartwell/nix-emacs][nix-emacs]] as well.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! nix-mode)
#+END_SRC
*** VIM mode
I like ~vim-script~... well no I don't but I still use it.
#+begin_src emacs-lisp :tangle yes
(package! vimrc-mode)
#+end_src
*** JVM Languages
Currently the languages I care about (apart from Java) are:
#+BEGIN_SRC emacs-lisp :tangle yes
; Kotlin > Java
(package! kotlin-mode)
; Groovy -> Testing
(package! groovy-mode)
#+END_SRC
*** Systemd Mode
Since I use a lot of user systemd units, it makes sense to have pretty
highlighting.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! systemd)
#+END_SRC
*** Dart Mode
Might eventually want to also get the companion [[https://github.com/bradyt/dart-server][dart server]] sometime, but for
now this syntax-highlighter will do. Might actually want to see if ~prettier~
has anything for it.
#+BEGIN_SRC emacs-lisp :tangle no
(package! dart-mode)
#+END_SRC
*** Wolfram Mode
Actually ~wolfram-mode~ seems to be able to do more than just syntax highlighting, but at the moment I just need font-locking.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! wolfram-mode)
#+END_SRC
*** Polymode
For working with ~.Rmd~ files and better ~orgmode~ R support.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! poly-R)
(package! poly-org)
#+END_SRC
*** Snakemake
Font locking for ~.smk~ files as they are evidently called (from [[https://github.com/kyleam/snakemake-mode][here]]).
#+BEGIN_SRC emacs-lisp :tangle yes
(package! snakemake-mode)
#+END_SRC
** Matrix Clients
Apparently Riot.im is now Element.io; and I could do with an ~emacs~ client...
#+begin_src emacs-lisp :tangle no
(package! pretty-hydra)
(package! matrix-client :recipe (:host github :repo "alphapapa/matrix-client.el"))
#+end_src
** Flycheck Additions
*** MELPA Helper
This is for linting files before submitting to MELPA.
#+BEGIN_SRC emacs-lisp :tangle yes
(package! package-lint)
(package! flycheck-package)
#+END_SRC
** Snippets
These are from [[https://github.com/hlissner][hlissner]].
*** Doom
#+BEGIN_SRC emacs-lisp :tangle yes
(package! emacs-snippets
  :recipe (:host github
           :repo "hlissner/emacs-snippets"
           :files ("*")))
#+END_SRC
*** Standard
These are from the [[https://github.com/AndreaCrotti/yasnippet-snippets][official snippets repo]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! yasnippet-snippets
  :recipe (:host github
           :repo "AndreaCrotti/yasnippet-snippets"
           :files ("*")))
#+END_SRC
** Math support
I like [[https://github.com/cdominik/cdlatex][cdlatex]].
#+BEGIN_SRC emacs-lisp :tangle yes
(package! cdlatex)
#+END_SRC
However, better support for symbols can be found in ~math-symbol-lists~ as [[https://www.emacswiki.org/emacs/TeXInputMethod][discussed here]].
#+begin_src emacs-lisp :tangle yes
(package! math-symbol-lists)
#+end_src
Also, [[https://github.com/johnbcoughlin/calctex][CalcTeX]] makes life a lot easier, and is faster than calling SymPy or Mathematica.
#+begin_src emacs-lisp :tangle yes
(package! calctex :recipe (:host github :repo "johnbcoughlin/calctex"
                           :files ("*.el" "calctex/*.el" "calctex-contrib/*.el" "org-calctex/*.el" "vendor"))
  :pin "784cf911bc96aac0f47d529e8cee96ebd7cc31c9")
#+end_src

# Local Variables:
# eval: (add-hook (quote after-save-hook) (lambda nil (org-babel-tangle)) nil t)
# End:
