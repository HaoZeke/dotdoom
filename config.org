#+TITLE: Literate doom-emacs config
#+AUTHOR: Rohit Goswami (HaoZeke) <rohit.goswami@aol.com>
#+DATE: 2020:04:09
#+HTML_LINK_HOME: https://dotdoom.rgoswami.me
#+HTML_HEAD_EXTRA: <script> window.goatcounter = { path: '/dotdoomhome', }; </script>
#+HTML_HEAD_EXTRA: <script data-goatcounter="https://rgoswami.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
#+PROPERTY: header-args :tangle yes :results none
#+OPTIONS: toc:nil

** Table of Contents :noexport:TOC_3_gh:
  - [[#about][About]]
    - [[#about-that-toc][About that TOC..]]
  - [[#personal-information][Personal Information]]
- [[#doom-emacs-stuff][Doom Emacs Stuff]]
  - [[#visual-tweaks][Visual tweaks]]
    - [[#font-face][Font Face]]
    - [[#unicode-fonts][Unicode Fonts]]
    - [[#helm-and-childframes][Helm and Childframes]]
    - [[#saner-dashboard][Saner Dashboard]]
  - [[#bugfixes][Bugfixes]]
  - [[#helm-changes][Helm changes]]
  - [[#disable-eager-functions][Disable eager functions]]
    - [[#kill-spellcheck][Kill spellcheck]]
    - [[#kill-over-eager-literate-after-save-hook][Kill over-eager literate after-save-hook]]
    - [[#kill-orgmode-template][Kill Orgmode template]]
  - [[#variables][Variables]]
    - [[#theme][Theme]]
    - [[#do-not-format-on-save][Do not Format on Save]]
  - [[#keybindings][Keybindings]]
    - [[#general][General]]
    - [[#evil-setup-and-error-handling][Evil Setup and Error Handling]]
    - [[#spacemacs-equivalency][Spacemacs Equivalency]]
    - [[#global-maps][Global Maps]]
    - [[#markdown-improvements][Markdown Improvements]]
    - [[#org-noter][Org Noter]]
    - [[#org-mode-additions][Org Mode additions]]
    - [[#anki-editor][Anki Editor]]
    - [[#cc-mode][CC Mode]]
    - [[#evil-colemak][Evil Colemak]]
    - [[#neotree----treemacs][Neotree --> Treemacs]]
    - [[#tex-mode][TeX Mode]]
  - [[#safe-evals-and-variables][Safe Evals and Variables]]
    - [[#macos-variables][MacOS Variables]]
    - [[#private-variables][Private Variables]]
    - [[#safe-variables][Safe Variables]]
    - [[#asynchronous-exports][Asynchronous Exports]]
    - [[#tramp-settings][TRAMP Settings]]
    - [[#language-servers][Language Servers]]
  - [[#package-settings][Package Settings]]
    - [[#word-wrap][Word wrap]]
    - [[#spellings][Spellings]]
    - [[#magit-aids][Magit Aids]]
    - [[#pdf-tools][PDF Tools]]
  - [[#anki-editor-1][Anki Editor]]
  - [[#org-additions][Org Additions]]
    - [[#modifications][Modifications]]
    - [[#ignore-support][Ignore Support]]
    - [[#file-handling][File Handling]]
    - [[#kill-ob-julia][KILL Ob-Julia]]
    - [[#org-download][Org Download]]
    - [[#org-babel][Org Babel]]
    - [[#async-org-babel][Async Org Babel]]
    - [[#org-config][Org Config]]
    - [[#org-latex-subfigure][Org Latex Subfigure]]
    - [[#org-rifle][Org Rifle]]
    - [[#org-mind-map][Org Mind Map]]
    - [[#org-drill][Org Drill]]
    - [[#org-re-reveal-additions][Org Re-Reveal Additions]]
    - [[#org-gcal][Org GCal]]
    - [[#hugo-settings][Hugo Settings]]
    - [[#citeproc][Citeproc]]
  - [[#syntax-highlighting][Syntax Highlighting]]
    - [[#misc-highlighting][Misc Highlighting]]
    - [[#cpp-additions][CPP Additions]]
    - [[#meson][Meson]]
    - [[#pkgbuild-mode][PKGBUILD Mode]]
    - [[#lammps-mode][LAMMPS Mode]]
    - [[#pug-mode][Pug Mode]]
    - [[#conf-mode-files][Conf Mode Files]]
    - [[#fortran][FORTRAN]]
    - [[#jvm-languages][JVM Languages]]
    - [[#systemd][Systemd]]
    - [[#dart-mode][Dart Mode]]
    - [[#saltstack][SaltStack]]
    - [[#mathematica][Mathematica]]
  - [[#aesthetics][Aesthetics]]
    - [[#wakatime][Wakatime]]
  - [[#dockerfile-mode][Dockerfile Mode]]
  - [[#functions][Functions]]
    - [[#org-export-html-with-useful-ids][Org-Export HTML with useful IDs]]
    - [[#org-mode-export-pdf-when-saved][Org-mode export pdf when saved]]
    - [[#org-mode-export-koma-letter][Org-mode export koma-letter]]
    - [[#org-mode-export-tex][Org-mode export TeX]]
    - [[#caveats][Caveats]]
    - [[#helper-function][Helper function]]
    - [[#async-command-without-buffers][Async Command without Buffers]]
    - [[#smarter-clang-formatting][Smarter Clang Formatting]]
    - [[#org-mode-export-to-markdown][Org-mode export to Markdown]]
    - [[#smartparens-wrapping][Smartparens Wrapping]]
    - [[#sort-words][Sort words]]
  - [[#chat-clients][Chat Clients]]
    - [[#matrix][Matrix]]
  - [[#projects][Projects]]
    - [[#dotdoom][dotDoom]]
    - [[#firestarter][Firestarter]]
  - [[#hooks][Hooks]]
    - [[#caveats-1][Caveats]]
    - [[#out-of-focus-hook][Out of Focus Hook]]
    - [[#before-save-hooks][Before Save Hooks]]
    - [[#disable-auto-rdm][Disable Auto RDM]]
  - [[#troubleshooting][Troubleshooting]]
- [[#sphinx-and-rst][Sphinx and RsT]]
- [[#r-helpers][R Helpers]]
    - [[#r-markdown][R Markdown]]
    - [[#rmd-to-rorg][Rmd to Rorg]]
- [[#org-latex][Org LaTeX]]
    - [[#async-config][Async Config]]
    - [[#path-additions][Path Additions]]
    - [[#config][Config]]
  - [[#shared-preferences][Shared Preferences]]
    - [[#compiler][Compiler]]
    - [[#packages][Packages]]
  - [[#export-templates][Export Templates]]
    - [[#koma-article][KOMA Article]]
    - [[#koma-report][KOMA Report]]
    - [[#tufte-book][Tufte Book]]
  - [[#latex-preview-for-org-mode][LaTeX Preview for Org mode]]
  - [[#math-support][Math support]]
  - [[#prettier-tex-buffers][Prettier TeX buffers]]
  - [[#babel-tabs][Babel Tabs]]
  - [[#pandoc-babel][Pandoc Babel]]
    - [[#restructured-text][Restructured Text]]
    - [[#markdown-html][Markdown HTML]]
  - [[#flycheck-additions][Flycheck Additions]]
    - [[#melpa-helpers][MELPA Helpers]]
- [[#notes][Notes]]
  - [[#noteyoda][noteYoda]]
    - [[#org-ref][Org-Ref]]
    - [[#helm-bibtex][Helm Bibtex]]
    - [[#org-roam][Org-Roam]]
    - [[#org-noter-1][Org-Noter]]
  - [[#org-capture][Org Capture]]
    - [[#buffer-size][Buffer Size]]
    - [[#functions-1][Functions]]
    - [[#templates][Templates]]

** About
This is a literate config file for [[https://github.com/hlissner/doom-emacs][doom-emacs]] by ~hlinssner~. This is meant to
be used with the =develop= branch. Much of the basic setup is pulled from the
[[https://github.com/gilbertw1/emacs-literate-starter][emacs literate starter]] by =gilbertw1=. The [[file:packages.org][companion packages page]] describes the
basic package setup, while the ~init.el~ is described on [[file:index.html][the project homepage]].
*** About that TOC..
So as mentioned [[https:https://github.com/snosov1/toc-org/issues/35][here]] there is trouble when ~org-export~ tries to create files
while keeping the ~org-toc~ tag.

It's not really a problem since ~org-export~ actually generates a TOC for the
files anyway.

** Personal Information
Let's set some variables with basic user information.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Rohit Goswami (HaoZeke)"
      user-mail-address "rohit.goswami@aol.com")
#+END_SRC
* Doom Emacs Stuff
** Visual tweaks
*** Font Face
Honestly the basic font setting is simply not pretty enough.
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Attribute Mono" :size 16))
(unless (find-font doom-font)
  (setq doom-font (font-spec :family "Cascadia Code PL" :size 14)))
#+END_SRC
*** Unicode Fonts
This should be implemented as fallback font once [[https://github.com/hlissner/doom-emacs/pull/861][this]] is merged.
#+BEGIN_SRC emacs-lisp
(setq doom-unicode-font (font-spec :family "Symbola" :size 20))
#+END_SRC
*** Helm and Childframes
I prefer the regular diminished font size, even for the childframes.
#+BEGIN_SRC emacs-lisp
;; Undo the helm text enlargement in childframes
(setq +helm-posframe-text-scale 0)
#+END_SRC
*** Saner Dashboard
I have trouble at work with the current DOOM dashboard. This one is from the
~doom-emacs~ lead developer, as found on Discord.
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "banner.png" doom-private-dir))
#+END_SRC
** Bugfixes
Most of these should be removed when ~doom~ fixes them.
#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ))
#+end_src
** Helm changes
This makes `helm` behave more like `ivy` while working with directories.
#+BEGIN_SRC emacs-lisp :tangle no
(after! helm
  ;; I want backspace to go up a level, like ivy
  (add-hook! 'helm-find-files-after-init-hook
    (map! :map helm-find-files-map
          "<DEL>" #'helm-find-files-up-one-level)))
#+END_SRC
*** Kill spellcheck
This is really really really excruciatingly slow for LaTeX mode and maybe even
for other random buffers.
#+BEGIN_SRC emacs-lisp
(setq-hook! 'LaTeX-mode-hook +spellcheck-immediately nil)
#+END_SRC
**** Snippets
I am not sure if these need to be initialized.
#+BEGIN_SRC emacs-lisp
; hlissner
(use-package! doom-snippets
  :after yasnippet)
; AndreaCrotti
(use-package! yasnippet-snippets
  :after yasnippet)
#+END_SRC
*** Kill over-eager literate after-save-hook
This is a little too frequent for working with a ~git~ repo. Henrik mentioned an
~async~ version of the re-compliation might be in the works, until then however I
will probably only manually trigger the re-compliation.
#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'after-save-hook #'+literate|recompile-maybe))
#+END_SRC
*** Kill Orgmode template
These conflict with my other templates.
#+BEGIN_SRC emacs-lisp
(set-file-template! "\\.org$" :ignore t)
#+END_SRC

** Variables
#+begin_src emacs-lisp
(setq
   org_notes (concat (getenv "HOME") "/Git/Gitlab/Mine/Notes/")
   zot_bib (concat (getenv "HOME") "/Documents/zotLib.bib")
   org-directory org_notes
   deft-directory org_notes
   org-roam-directory org_notes
   )
#+end_src
*** Theme
Sometimes I do tire of the defaults.
#+BEGIN_SRC emacs-lisp
;; Also like doom-city-lights
(setq doom-theme 'doom-spacegrey)
#+END_SRC
*** Do not Format on Save
Formatting with ~styler~ takes forever.
#+BEGIN_SRC emacs-lisp
(setq +format-on-save-enabled-modes '(not emacs-lisp-mode ; works well enough without it
                                          sql-mode        ; sqlformat is broken
                                          tex-mode        ; latexindent is broken
                                          latex-mode      ; latexindent is broken
                                          bibtex-mode     ; is broken
                                          ess-r-mode      ; styler takes forever
                                          web-mode      ; dunno who this is for
                                          ))
#+END_SRC
** Keybindings
These are eventually going to with [[https://github.com/noctuid/general.el][general]] anyway. So it's better to load that
for now and carry on. Later this block can be prevented from being tangled.
*** DONE General
- [X] Remove once merged upstream.
This does very little other than load it and remind it that ~SPC~ is the leader for the other bindings to work.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! general)
;; Creating a constant for making future changes simpler
(defconst my-leader "SPC")
;; Tell general all about it
(general-create-definer my-leader-def
  :prefix my-leader)
  ;; :prefix my-leader)
;; (general-create-definer my-local-leader-def
;;   ;; :prefix my-local-leader
;;   :prefix "SPC m")
#+END_SRC
*** Evil Setup and Error Handling
Actually this might not be ported over so I'm just going to put this elsewhere.
#+BEGIN_SRC emacs-lisp
;; I like short names
(general-evil-setup t)
;; Stop telling me things begin with non-prefix keys
(general-auto-unbind-keys)
#+END_SRC
*** Spacemacs Equivalency
**** Kill buffer
Also it's inconvenient to have a key chord requiring two hands to close a
buffer.
#+BEGIN_SRC emacs-lisp
; Compatibility, delete when fully migrated
(defconst my-leader "SPC")
; Bind a new key chord
(map!
 (:leader
   (:prefix "b"
     :desc "Kill buffer" "d" #'kill-this-buffer)
   (:prefix ("k" . "kill")
     :desc "Save and kill" "e" 'save-buffers-kill-terminal
     :desc "Kill buffer" "b" 'my-kill-this-buffer
     :desc "Delete frame" "f" 'delete-frame
   (:prefix ("o" . "Other")
     :desc "Frames" "f" 'delete-other-frames
     :desc "Windows" "w" 'delete-other-windows
     )
   )
   ))
#+END_SRC
***** general.el
The binding syntax of the future, TODAY!
#+BEGIN_SRC emacs-lisp :tangle no
;; ** Global Keybindings
;; Normal mode?
(nmap
 :prefix my-leader
 "b d" #'kill-this-buffer
  ;; kill things
  "k" '(:ignore t :which-key "kill")
  "k e" 'save-buffers-kill-terminal
  "k b" 'my-kill-this-buffer
  "k f" 'delete-frame
  "k o f" 'delete-other-frames
  "k o w" 'delete-other-windows
 "a" 'helm-mini)
;; (my-leader-def 'normal 'override
;;   "a" 'org-agenda)
#+END_SRC
*** Global Maps
**** Multiple Cursors
These need practice. Many of these are already in the default configuration, but
they are redefined here for mnemonic usage. Also to add the ~which-key~ hints.
#+BEGIN_SRC emacs-lisp
(nmap
  :prefix "gz"
  :keymaps 'global
  "r" '(mc/edit-lines :wk "Span region")
  "z" '(+evil/mc-make-cursor-here :wk "Place frozen cursor")
  )
#+END_SRC
**** Move around with Links
Useful for navigating files and what not.
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Follow thing"  "RET" 'org-open-at-point)
#+END_SRC
**** Replace Stuff
There are way too many of these to keep using ~helm~.
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("r" . "Replace")
      :desc "String" "s" 'replace-string
      :desc "Query" "q" 'query-replace
      (:prefix ("r" . "Regexp")
        :desc "String" "s" 'replace-regexp
        :desc "Query" "q" 'query-replace-regexp
        )
      )
      )
#+END_SRC
**** Insert Unicode
This should hopefully propogate across all modes.
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("i" . "Insert")
       :desc "Unicode" "u" 'insert-char
       :desc "Snippet" "s" 'yas-insert-snippet
       :desc "From Clipboard" "y" '+default/yank-pop
       :desc "From Evil Registers" "r" 'counsel-evil-registers
      )
)
#+END_SRC
**** Wrap Words
- [ ] Load conditionally
This is for working with the various options enabled by ~+smartparens~.
#+BEGIN_SRC emacs-lisp :tangle no
(map! :leader
      (:prefix ("i" . "Insert")
        (:prefix ("w" . "Wrap")
          :desc "Backticks" "`" . 'sp-wrap-backtick
          :desc "Tildes" "~" . 'sp-wrap-tilde
          )))
#+END_SRC
**** Lookup
These were bound to really weird things.
#+BEGIN_SRC emacs-lisp
(nmap
  :prefix my-leader
  ;; look things up
  "l" '(:ignore t :wk "lookup")
  "l o" '(+lookup/online-select :wk "Online")
  "l f" '(+lookup/file :wk "File")
  )
#+END_SRC
**** No ESC
The escape key for exiting things seems very painful.
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(insert visual normal)
 "S-SPC" 'evil-force-normal-state)
 #+END_SRC
*** Markdown Improvements
Local leader is already bound to `m` and there are few bindings, this just adds
more.
#+BEGIN_SRC emacs-lisp
(map! :localleader
      :map markdown-mode-map
      :prefix ("i" . "Insert")
      :desc "Blockquote"    "q" 'markdown-insert-blockquote
      :desc "Bold"          "b" 'markdown-insert-bold
      :desc "Code"          "c" 'markdown-insert-code
      :desc "Emphasis"      "e" 'markdown-insert-italic
      :desc "Footnote"      "f" 'markdown-insert-footnote
      :desc "Code Block"    "s" 'markdown-insert-gfm-code-block
      :desc "Image"         "i" 'markdown-insert-image
      :desc "Link"          "l" 'markdown-insert-link
      :desc "List Item"     "n" 'markdown-insert-list-item
      :desc "Pre"           "p" 'markdown-insert-pre
      (:prefix ("h" . "Headings")
        :desc "One"   "1" 'markdown-insert-atx-1
        :desc "Two"   "2" 'markdown-insert-atx-2
        :desc "Three" "3" 'markdown-insert-atx-3
        :desc "Four"  "4" 'markdown-insert-atx-4
        :desc "Five"  "5" 'markdown-insert-atx-5
        :desc "Six"   "6" 'markdown-insert-atx-6))
#+END_SRC
*** Org Noter
These bindings should probably be after ~org-noter~ is loaded.
#+BEGIN_SRC emacs-lisp
(map! :localleader
      :map (org-mode-map pdf-view-mode-map)
      (:prefix ("o" . "Org")
        (:prefix ("n" . "Noter")
          :desc "Noter" "n" 'org-noter
          )))
#+END_SRC
*** Org Mode additions
Apart from extension specific bindings, here we define useful functions which
are a part of ~org-mode~.
#+BEGIN_SRC emacs-lisp
(after! org (map! :localleader
      :map org-mode-map
      :desc "Eval Block" "e" 'ober-eval-block-in-repl
      (:prefix "o"
        :desc "Tags" "t" 'org-set-tags
        :desc "Roam Bibtex" "b" 'orb-note-actions
        (:prefix ("p" . "Properties")
          :desc "Set" "s" 'org-set-property
          :desc "Delete" "d" 'org-delete-property
          :desc "Actions" "a" 'org-property-action
          )
        )
      (:prefix ("i" . "Insert")
        :desc "Link/Image" "l" 'org-insert-link
        :desc "Item" "o" 'org-toggle-item
        :desc "Citation" "c" 'org-ref-helm-insert-cite-link
        :desc "Footnote" "f" 'org-footnote-action
        :desc "Table" "t" 'org-table-create-or-convert-from-region
        :desc "Screenshot" "s" 'org-download-screenshot
        (:prefix ("b" . "Math")
         :desc "Bold" "f" 'org-make-bold-math
         :desc "Blackboard" "b" 'org-make-blackboard-math
         :desc "Remove" "r" 'org-make-mathrm-math
         :desc "Vert" "v" 'org-make-vert-math
         )
        (:prefix ("h" . "Headings")
          :desc "Normal" "h" 'org-insert-heading
          :desc "Todo" "t" 'org-insert-todo-heading
          (:prefix ("s" . "Subheadings")
            :desc "Normal" "s" 'org-insert-subheading
            :desc "Todo" "t" 'org-insert-todo-subheading
            )
          )
        (:prefix ("e" . "Exports")
          :desc "Dispatch" "d" 'org-export-dispatch
          )
        )
      )
  )
#+END_SRC
**** Math Environments
Modified from [[https://tex.stackexchange.com/questions/22573/how-can-i-tell-auctex-that-breqn-is-a-math-environment][this TeXSE answer]].
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'add-my-latex-environments)
(defun add-my-latex-environments ()
  (LaTeX-add-environments
   '("thm" LaTeX-env-label)
   '("prop" LaTeX-env-label)
   '("lem" LaTeX-env-label)
   '("cor" LaTeX-env-label)
   '("defn" LaTeX-env-label)
   '("not" LaTeX-env-label)
   '("rem" LaTeX-env-label)
   '("ex" LaTeX-env-label)
   '("align" LaTeX-env-label)
   '("notation" LaTeX-env-label)
   '("dmath" LaTeX-env-label)
     ))

;; Code I added to make syntax highlighting work in Auctex

(custom-set-variables
 '(font-latex-math-environments (quote
     ("display" "displaymath" "equation" "eqnarray" "gather" "multline"
      "align" "alignat" "xalignat" "dmath")))
  '(TeX-insert-braces nil)) ;;Stops putting {} on argumentless commands to "save" whitespace

;; Additionally, reftex code to recognize this environment as an equation
(setq reftex-label-alist
  '(("dmath" ?e nil nil t)))
#+end_src
**** Special Math Environments
Stolen [[https://tex.stackexchange.com/questions/45712/faster-way-of-writing-mathbf][from here]].
#+begin_src emacs-lisp
(defun org-make-bold-math ()
  "If there's a selection -- wrap this with '\symbf{' and '}'
   and put the point to the end.  Otherwise -- put the point
   between '\symbf{' and '}'

   Also: when not in math mode -- enclose the thing in dollars."

  (interactive)

  (let (start end
              (delim "")
              (jump 1)
              )

    (when (not (texmathp))
      (setq delim "$")
      (setq jump 2)
      )

    (if (use-region-p)
        (progn
          (setq start (region-beginning))
          (setq end (region-end))

          (narrow-to-region start end)

          (goto-char (point-min))
          (insert (concat delim "\\symbf{"))

          (goto-char (point-max))
          (insert (concat "}" delim))
          (widen)
          )

      (progn
        (insert (concat delim "\\symbf{}" delim))
        (backward-char jump)
        )
      )
))


(defun org-make-blackboard-math ()
  "If there's a selection -- wrap this with '\mathbb{' and '}'
   and put the point to the end.  Otherwise -- put the point
   between '\mathbb{' and '}'

   Also: when not in math mode -- enclose the thing in dollars."

  (interactive)

  (let (start end
              (delim "")
              (jump 1)
              )

    (when (not (texmathp))
      (setq delim "$")
      (setq jump 2)
      )

    (if (use-region-p)
        (progn
          (setq start (region-beginning))
          (setq end (region-end))

          (narrow-to-region start end)

          (goto-char (point-min))
          (insert (concat delim "\\mathbb{"))

          (goto-char (point-max))
          (insert (concat "}" delim))
          (widen)
          )

      (progn
        (insert (concat delim "\\mathbb{}" delim))
        (backward-char jump)
        )
      )
))

(defun org-make-mathrm-math ()
  "If there's a selection -- wrap this with '\mathrm{' and '}'
   and put the point to the end.  Otherwise -- put the point
   between '\mathrm{' and '}'

   Also: when not in math mode -- enclose the thing in dollars."

  (interactive)

  (let (start end
              (delim "")
              (jump 1)
              )

    (when (not (texmathp))
      (setq delim "$")
      (setq jump 2)
      )

    (if (use-region-p)
        (progn
          (setq start (region-beginning))
          (setq end (region-end))

          (narrow-to-region start end)

          (goto-char (point-min))
          (insert (concat delim "\\mathrm{"))

          (goto-char (point-max))
          (insert (concat "}" delim))
          (widen)
          )

      (progn
        (insert (concat delim "\\mathrm{}" delim))
        (backward-char jump)
        )
      )
))

(defun org-make-vert-math ()
  "If there's a selection -- wrap this with '\vert{' and '}'
   and put the point to the end.  Otherwise -- put the point
   between '\vert{' and '}'

   Also: when not in math mode -- enclose the thing in dollars."

  (interactive)

  (let (start end
              (delim "")
              (jump 1)
              )

    (when (not (texmathp))
      (setq delim "$")
      (setq jump 2)
      )

    (if (use-region-p)
        (progn
          (setq start (region-beginning))
          (setq end (region-end))

          (narrow-to-region start end)

          (goto-char (point-min))
          (insert (concat delim "‖"))

          (goto-char (point-max))
          (insert (concat "‖" delim))
          (widen)
          )

      (progn
        (insert (concat delim "‖‖" delim))
        (backward-char jump)
        )
      )
))
#+end_src
*** Anki Editor
These are only relevant to ~org-mode~. Nevertheless they are not part of
~org-mode~ so semantically it makes no sense to use ~o~ after the localleader.
#+BEGIN_SRC emacs-lisp :tangle yes
(map! :localleader
      :map org-mode-map
      (:prefix ("a" . "Anki")
        :desc "Push" "p" 'anki-editor-push-notes
        :desc "Retry" "r" 'anki-editor-retry-failure-notes
        :desc "Insert" "n" 'anki-editor-insert-note
        (:prefix ("c" . "Cloze")
          :desc "Dwim" "d" 'anki-editor-cloze-dwim
          :desc "Region" "r" 'anki-editor-cloze-region
          )
        )
 )
#+END_SRC
*** CC Mode
These are basically wrappers around various ~rtags~ functions.
#+BEGIN_SRC emacs-lisp
(nmap
:prefix my-leader
:keymaps 'c-mode-base-map
"m" '(:ignore t :wk "Local Commands")
"m r" '(:ignore t :wk "Rtags")
"m r c" '(rtags-check-includes :wk "Check Includes")
;; All the find commands
"m r f" '(:ignore t :wk "Find")
"m r f s" '(:ignore t :wk "Symbol")
"m r f s a" '(rtags-find-symbol-at-point :wk "At point")
"m r f s s" '(rtags-find-symbol :wk "Symbol")
"m r f s c" '(:ignore t :wk "Current")
"m r f s c f" '(rtags-find-symbol-current-file :wk "File")
"m r f s c d" '(rtags-find-symbol-current-dir :wk "Directory")
"m r f f" '(rtags-find-functions-called-by-this-function :wk "Functions")
"m r f r" '(rtags-find-references :wk "References")
)

#+END_SRC
*** Evil Colemak
These are mostly because movement without ~hnei~ is horrible. Read about it
[[https://rgoswami.me/posts/colemak-dots-refactor/][here]].
#+BEGIN_SRC emacs-lisp
(use-package! evil-colemak-basics
  :after evil
  :config
  (setq evil-colemak-basics-rotate-t-f-j t)
  (global-evil-colemak-basics-mode)
  )
#+END_SRC
**** Visual Lines
Since I tend to keep ~visual-line-mode~ all the time, [[https://github.com/YourFin/evil-better-visual-line/][evil-better-visual-line]] is a natural choice.
#+BEGIN_SRC emacs-lisp
(use-package! evil-better-visual-line
  :after evil-colemak-basics
  :config
  (evil-better-visual-line-on)
  (map! :map evil-colemak-basics-keymap
        (:nvm "n" 'evil-better-visual-line-next-line
         :nvm "e" 'evil-better-visual-line-previous-line
         :nvm "g n" 'evil-next-line
         :nvm "g e" 'evil-previous-line))
)
#+END_SRC
**** Search
Harmonizing with Vimium.
#+BEGIN_SRC emacs-lisp
(after! evil (map! :map evil-motion-state-map
                   (:n :desc "Previous match" "K" 'evil-ex-search-previous
                    :n :desc "Next match" "k" 'evil-ex-search-next
                    :n :desc "Forward search" "/" 'evil-search-forward
                    )
                   ))
#+END_SRC
**** Window Bindings
These are somehow not part of the ~evil-colemak~ setup.
#+BEGIN_SRC emacs-lisp
(after! evil
  (map! :map evil-window-map
        (:leader
         (:prefix ("w" . "Select Window")
          :n :desc "Left"  "h" 'evil-window-left
          :n :desc "Up"    "e" 'evil-window-up
          :n :desc "Down"  "n" 'evil-window-down
          :n :desc "Right" "i" 'evil-window-right
          ))
        ))
#+END_SRC
**** Page Movement
Harmonizing with Zathura.
#+BEGIN_SRC emacs-lisp
(after! evil
  (map! :map evil-colemak-basics-keymap
      :nv "N" 'evil-scroll-page-down
      :nv "E" 'evil-scroll-page-up)
  )
#+END_SRC
**** Evil Org
Annoyingly, ~evil-org-mode~ had a map which kept overriding all my other
settings. Thankfully it has a helper variable to set movement. I also do not
need this anyway, at-least not by default.
#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'org-mode-hook 'evil-org-mode)
  (setq evil-org-movement-bindings
        '((up . "e") (down . "n")
          (left . "h") (right . "i"))
        )
)
#+END_SRC
*** DONE Neotree --> Treemacs
**** CANCELLED Toggle pane
This remaps ~SPC o N~ to use ~treemacs~.
I guess this doesn't make all that much sense, but ~t~ and ~T~ and bound to
terminals and that makes sense, so I guess this is fine.
#+BEGIN_SRC emacs-lisp :tangle no
;; Remap opening the sidebar
(map! :leader
      :nv "o n" nil
      :desc "Open treemacs pane"
      :n "o n" #'+treemacs/toggle)
;; Remap finding stuff
(map! :leader
      :nv "o N" nil
      :desc "Treemacs find file"
      :n "o N" 'treemacs-find-file)
#+END_SRC
Cancelled since [[https://github.com/hlissner/doom-emacs/commit/287460cb050c94010f4d8ded0fbfecf479c1772a][this commit]] on the ~develop~ branch.
*** TeX Mode
These are more semantic for me.
#+BEGIN_SRC emacs-lisp
(nmap
  :prefix my-leader
  :keymaps '(latex-mode-map tex-mode-map LaTeX-mode-map)
  ;; Folding Stuff
  "m f" '(:ignore t :wk "Fold Things")
  "m f c" '(TeX-fold-comment :wk "Comment")
  "m f e" '(TeX-fold-env :wk "Environment")
  "m f m" '(TeX-fold-math :wk "Math")
  ;; Insertions
  "m i" '(:ignore t :wk "Insert")
  "m i m" '(helm-insert-latex-math :wk "Math Symbols")
  "m i r" '(:ignore t :wk "References")
  "m i r h" '(helm-bibtex-with-local-bibliography :wk "Helm")
  "m i r r" '(reftex-citation :wk "Reftex")
  )
#+END_SRC
** Safe Evals and Variables
*** MacOS Variables
To use ~path~ variables [[https://github.com/purcell/exec-path-from-shell][more easily]].
#+begin_src emacs-lisp
(cond (IS-MAC (use-package! exec-path-from-shell
                :config
                (exec-path-from-shell-initialize)
                )
              ))
#+end_src
*** Private Variables
On a Mac, when using Nix and Emacs 28, some of the path variables need to be set to find ~gpg~. These should probably be handled through ~doom env~ since the terminal does not have trouble finding ~gpg~.
#+begin_src emacs-lisp
(cond (IS-MAC (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg")) ;; brew
              (setq exec-path (append exec-path '("/run/current-system/sw/bin"))) ;; nix
              (setq exec-path (append exec-path '("/usr/local/bin/"))) ;; brew
              ))
#+end_src
These are encrypted with ~gpg~ and are essentially set mostly by ~custom-*~.
#+BEGIN_SRC emacs-lisp
(use-package! epa-file
  :demand
  :config
  (epa-file-enable)
    (load (concat doom-private-dir "local/private.el.gpg"))
  )
#+END_SRC
*** Safe Variables
The problem is that ~packages.el~ isn't being produced by the clever little ugly
commit I tried so, this is a workaround to tangle *any* file to be produced in
~.el~ format in the same location.
**** Tangle
So adding the automatic tangling code doesn't mangle things up everytime you
open emacs.
#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values '((after-save-hook . haozeke/org-save-and-export-latex)
 (before-save-hook . org-babel-execute-buffer)))
#+END_SRC
**** KILL Caveats
CLOSED: [2020-07-24 Fri 01:17]
- This actually forms it relative to the exact path.
  (Gotta move it to the config folder)
- The actual code is much more elegant in every way possible.
- Seriously there has to be  a way to not have to do this.
*** Asynchronous Exports
As per this [[https://superuser.com/a/898717/899764][interesting answer on the superuser forums]], I need to set
~org-export-async-init-file~.
#+BEGIN_SRC emacs-lisp
(setq org-export-async-init-file (concat doom-private-dir "local/async-ox.el"))
#+END_SRC
*** TRAMP Settings
I use some paths on my remote machines, which are non-standard.
#+BEGIN_SRC emacs-lisp
  (after! tramp
    (add-to-list 'tramp-remote-path "~/.local/bin")
    (add-to-list 'tramp-remote-path "~/.cargo/bin")
    (add-to-list 'tramp-remote-path "~/.hpc/bin")
    (add-to-list 'tramp-remote-path "~/.local/lsp/bin")
    (add-to-list 'tramp-remote-path "~/.micromamba/envs/lsp/bin/")
    )
#+END_SRC
*** Language Servers
Between ~lsp-mode~ and ~eglot~ I ended up with eglot for reasons better described here.
#+begin_src emacs-lisp
(after! eglot
  :config
  (add-hook 'nix-mode-hook 'eglot-ensure)
  (add-hook 'f90-mode-hook 'eglot-ensure)
  (set-eglot-client! 'cc-mode '("clangd" "-j=3" "--clang-tidy"))
  (set-eglot-client! 'python-mode '("pylsp"))
  (when (string= (system-name) "Rohits-MacBook-Pro.local")
  (setq exec-path (append exec-path '(
                                      (concat (getenv "HOME") "/.micromamba/envs/lsp/bin/") ;; python, fortran
                                      (concat (getenv "HOME") "/.local/lsp/bin/") ;; clangd
                                      (concat (getenv "HOME") "/.digestif/bin/") ;; tex
                                      (concat (getenv "HOME") "/.nvm/versions/node/v16.1.0/bin/bash-language-server")
                                      )))
    )
  )
#+end_src
** Package Settings
These should eventually go into a different module.
Each of these.
*** Word wrap
This section is to work with the settings for the ~word-wrap~ ~doom~ module.
#+BEGIN_SRC emacs-lisp
;; enable word-wrap in C/C++/ObjC/Java
(add-hook! 'markdown-mode-hook #'+word-wrap-mode)
(add-hook! 'text-mode-hook #'+word-wrap-mode)
(add-hook! 'tex-mode-hook #'+word-wrap-mode)
#+END_SRC
*** Spellings
#+begin_src emacs-lisp
(after! spell-fu
  (setq spell-fu-idle-delay 0.5 ; default is 0.25
        ispell-program-name "hunspell"
        ;; aspell -> "--sug-mode=ultra"
        ;;ispell-extra-args '("-d en_US")
        ispell-dictionary "en_US" ; needed for MacOS in particular
        ispell-personal-dictionary "~/.aspell.en.pws" ; standard location
        spell-fu-dictionary "~/.config/dict" ; standard location
        )
  ;; use American English as ispell default dictionary
  (ispell-change-dictionary "american" t)
  (setq-default ispell-program-name "hunspell")
)
#+end_src
*** Magit Aids
**** DONE Magit todos
Of course this is not really meant to be here..
A variation of this was included upstream in the ~develop~ branch.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! magit-org-todos
  :mode "\\COMMIT_EDITMSG\\'"
  :commands (magit-org-todods magit-org-todos-autoinsert)
  :config
  (magit-org-todos-autoinsert))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package! magit-todos)
#+END_SRC
**** DONE Magithub
This is for sweet github integration.
Also integrated upstream.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! magithub
  :after magit
  :commands (magithub-clone
             magithub-completion-enable)
  ;; :ensure t
  :config
  (magithub-feature-autoinject t)
  (setq
   magithub-clone-default-directory "$HOME/Git/Github/"
   magithub-dir (concat doom-etc-dir "magithub/")
   magithub-preferred-remote-method 'clone_url))
(use-package! evil-magit :after magit
  :init
  (setq evil-magit-state 'normal))
#+END_SRC
*** PDF Tools
These bindings are essentially part of ~org-noter~ however, they do not actually
need to be bound in ~org-mode~ files. Also updated to have ~evil-colemak~ bindings.
#+begin_src emacs-lisp :tangle yes
(after! pdf-view
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-width)
  (add-hook! 'pdf-view-mode-hook (evil-colemak-basics-mode -1))
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t
        pdf-view-resize-factor 1.1)
   ;; faster motion
 (map!
   :map pdf-view-mode-map
   :n "g g"          #'pdf-view-first-page
   :n "G"            #'pdf-view-last-page
   :n "N"            #'pdf-view-next-page-command
   :n "E"            #'pdf-view-previous-page-command
   :n "e"            #'evil-collection-pdf-view-previous-line-or-previous-page
   :n "n"            #'evil-collection-pdf-view-next-line-or-next-page
   :localleader
   (:prefix "o"
    (:prefix "n"
     :desc "Insert" "i" 'org-noter-insert-note
     ))
 ))
#+end_src

#+RESULTS:

** Anki Editor
# TODO Add to doom as a module
This is for my favorite [[https://github.com/louietan/anki-editor][anki interaction]] mechanism.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! anki-editor
  :after org-noter
  :config
  ; I like making decks
  (setq anki-editor-create-decks 't))
#+END_SRC
** Org Additions
These are numerous and complicated enough to be in a segment of their own.
*** todo Modifications
I like having the date on my TODO items.
#+begin_src emacs-lisp :tangle yes
(setq org-log-done "time"
      org-log-done-with-time 't)
#+end_src
*** Ignore Support
For the longest time I was setting this per file for bizarre reasons. This makes much more sense.
#+begin_src emacs-lisp
(use-package! ox-extra
  :after org
  :config
  (ox-extras-activate '(ignore-headlines))
  )
#+end_src
*** File Handling
This controls what is used to open links in ~org~ documents. Since there are
only a few defaults defined, I am just prepending them to my changes instead of
dealing with ~append~ and stuff.
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
  '((auto-mode . emacs)
    ("\\.mm\\'" . default)
    ("\\.x?html?\\'" . default)
    ("\\.pdf\\'" . default)
    ("\\.png\\'" . viewnior)
    ("\\.jpg\\'" . viewnior)
    ("\\.svg\\'" . viewnior)
    ))
#+END_SRC

*** KILL Ob-Julia
So ~julia~ support is inbuilt, however the process variable needs to be set:
#+BEGIN_SRC emacs-lisp :tangle no
(setq  inferior-julia-program-name "/bin/julia")
#+END_SRC
*** Org Download
This is already included in the standard doom setup. However, I was having
trouble with relative exports so I have this one instead. Partially kanged from
~doom-emacs~.
Before setting this up, a new function is defined to call the screenshot process, this setup is [[https://github.com/poligen/dotfiles/blob/25785810f9bf98f6eec93e400c686a4ad65ac310/doom.d/config.el][kanged from here]].
#+BEGIN_SRC emacs-lisp
;; From https://github.com/poligen/dotfiles/blob/25785810f9bf98f6eec93e400c686a4ad65ac310/doom.d/config.el
;; My customized org-download to incorporate flameshot gui Workaround to setup flameshot, which enables annotation.
;; In flameshot, set filename as "screenshot", and the command as "flameshot gui -p /tmp", so that we always ends up
;; with /tmp/screenshot.png. Nullify org-download-screenshot-method by setting it to `echo', so that essentially we
;; are only calling (org-download-image org-download-screenshot-file).
(defun hz-org-download-screenshot ()
  "Capture screenshot and insert the resulting file.
The screenshot tool is determined by `org-download-screenshot-method'."
  (interactive)
  (let ((tmp-file "/tmp/screenshot.png"))
    (delete-file tmp-file)
    (call-process-shell-command "flameshot gui -p /tmp/")
    ;; Because flameshot exit immediately, keep polling to check file existence
    (while (not (file-exists-p tmp-file))
      (sleep-for 2))
    (org-download-image tmp-file)))
#+END_SRC
Now we can configure the package itself.
#+BEGIN_SRC emacs-lisp
(use-package! org-download
  :after org
  :config
  (setq-default org-download-image-dir "./images/"
                ;; org-download-screenshot-method "flameshot gui --raw > %s"
                org-download-delete-image-after-download t
                org-download-method 'directory
                org-download-heading-lvl 1
                org-download-screenshot-file "/tmp/screenshot.png"
                )
  (cond (IS-LINUX (setq-default org-download-screenshot-method "xclip -selection clipboard -t image/png -o > %s"))
        (IS-MAC (setq-default org-download-screenshot-method "screencapture -i %s")))
  )
#+END_SRC
*** Org Babel
Julia and Mathematica are not set. Other languages might also be needed here eventually.
#+BEGIN_SRC emacs-lisp
(after! 'org
            (org-babel-do-load-languages 'org-babel-load-languages
                                         (append org-babel-load-languages
                                                 ;; '((julia . t))
                                                 '((mathematica . t))
                                                 ))
            )
(setq org-babel-mathematica-command "~/.local/bin/mash")
#+END_SRC
*** Async Org Babel
From [[https://github.com/diadochos/org-babel-eval-in-repl][here]]. Now we can configure this.
#+BEGIN_SRC emacs-lisp
(use-package! org-babel-eval-in-repl
  :after org
  :config
  (setq eir-jump-after-eval nil)
  )
#+END_SRC
*** Org Config
These are just variables I need to set to prevent things from dying.
**** Switching to XeLaTeX
Since I use a lot of unicode math; it makes sense to switch from LaTeX to
XeLaTeX everywhere. This section borrows heavily from [[https://github.com/david-sawatzke/dotfiles/blob/80f9ffb265bf664623f5ad39f3a64771e90a402e/doom.d/config.el][here]] and [[https://github.com/isfootaken/.emacs.d/blob/f2a3cd64c62ec1be544bdb8e2427a0e2fafcaf02/conf.org][here]]. Might
possibly want to look [[https://github.com/isfootaken/emacs-org-config/blob/376f770d7427665fa1f8e691fd4c2316febcb41d/conf.org#org-latex-preview][at this]] later too.
#+BEGIN_SRC emacs-lisp
;; Set after the default-packages list anyway
(setq org-latex-packages-alist 'nil)
(setq org-latex-default-packages-alist
  '(("AUTO" "inputenc"  t ("pdflatex"))
    ("T1"   "fontenc"   t ("pdflatex"))
    (""     "graphicx"  t)
    (""     "grffile"   t)
    (""     "minted"   t)
    ;; ("dvipsnames,svgnames*,x11names*,table"     "xcolor"   t)
    (""     "longtable" nil)
    (""     "wrapfig"   nil)
    (""     "rotating"  nil)
    ("normalem" "ulem"  t)
    (""     "amsmath"   t)
    (""     "amssymb"   t)
    (""     "unicode-math"   t)
    (""     "mathtools"   t)
    (""     "textcomp"  t)
    (""     "capt-of"   nil)
    (""     "hyperref"  nil)))
;; (add-to-list 'org-latex-default-packages-alist '("" "fontspec" t))
;; (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
;; (add-to-list 'org-latex-packages-alist '("" "unicode-math"))
(plist-put org-format-latex-options :scale 2.2)
(add-to-list 'org-preview-latex-process-alist '(dvixelatex :programs
         ("xetex" "convert")
         :description "pdf > png" :message "you need to install the programs: xetex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvisvgm %f -n -b min -c %S -o %O")))

(add-to-list 'org-preview-latex-process-alist '(imagexetex :programs
         ("xelatex" "convert")
         :description "pdf > png" :message "you need to install the programs: xelatex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("xelatex -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("convert -density %D -trim -antialias %f -quality 100 %O")))
#+END_SRC
**** Inline images
These need to be disabled by default otherwise ~emacs~ stalls often. Also, it
turns out that ~dvipng~ has some bugs on my system, so Imagemagick works better,
once security policies have been adjusted in ~/etc/ImageMagick-/policy.xml~.
#+BEGIN_SRC emacs-lisp
  (after! org
    (setq org-preview-latex-default-process 'imagexetex)
    (setq org-startup-with-inline-images 'nil)
    (setq org-image-actual-width 400)
    )
#+END_SRC
*** Org Latex Subfigure
This modified [[https://list.orgmode.org/orgmode/87mty1an66.fsf@posteo.net/][environment makes it easier]] to work with reports.
#+begin_src emacs-lisp
;; TODO: Figure out how to pass parameters other than width
;; TODO: Also make a subcaption label
  (org-link-set-parameters
   "subfig"
   :follow (lambda (file) (find-file file))
   :face '(:foreground "chocolate" :weight bold :underline t)
   :display 'full
   :export (lambda (file desc backend)
       (when (eq backend 'latex)
         (if (string-match ">(\\(.+\\))" desc)
       (concat "\\begin{subfigure}[b]{"
               (match-string 1 desc)
               "}\\caption{" (replace-regexp-in-string "\s+>(.+)" "" desc) "}"
         "\\includegraphics"
         "["
                           "width=\\textwidth"
         "]"
         "{"
            file
         "}"
            "\\end{subfigure}"
                      )
     (format "\\begin{subfigure}[b]{\\textwidth}\\includegraphics{%s}\\caption{%s}\\end{subfigure}" file desc)))))
#+end_src
#+begin_export latex
     \begin{subfigure}[b]{0.3\textwidth}
         \centering
         \includegraphics[width=\textwidth]{graph2}
         \caption{$y=3sinx$}
         \label{fig:three sin x}
     \end{subfigure}
#+end_export

**** Prevent invisible area modifications
First [[https://yiufung.net/post/org-mode-hidden-gems-pt1/][discussed here]]. The invisible area modifications are a plague. I can't imagine why this is not set by default.
#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'show-and-error)
#+end_src
**** Compact subtrees
We would like to not have additional newlines between trees.
#+begin_src emacs-lisp
(setq org-cycle-separator-lines 0)
#+end_src
*** Org Rifle
This probably needs to be refactored later. Or loaded elsewhere.
The keymaps are defined in the following way:
#+BEGIN_SRC emacs-lisp
(use-package! helm-org-rifle
  :after org
  :general
  (:keymaps 'org-mode-map
            :states 'normal
            :prefix my-leader
            "m r" '(:ignore t :wk "Rifle (Helm)")
            "m r b" '(helm-org-rifle-current-buffer :wk "Rifle buffer")
            "m r e" '(helm-org-rifle :wk "Rifle every open buffer")
            "m r d" '(helm-org-rifle-directory :wk "Rifle from org-directory")
            "m r a" '(helm-org-rifle-agenda-files :wk "Rifle agenda")
            "m r o" '(:ignore t :wk "Occur (Persistent)")
            "m r o b" '(helm-org-rifle-current-buffer :wk "Rifle buffer")
            "m r o e" '(helm-org-rifle :wk "Rifle every open buffer")
            "m r o d" '(helm-org-rifle-directory :wk "Rifle from org-directory")
            "m r o a" '(helm-org-rifle-agenda-files :wk "Rifle agenda")
            )
  )
#+END_SRC
*** Org Mind Map
[[https://github.com//theodorewiles/org-mind-map][This]] is used to create ~graphiz~ graphs from ~org-mode~ stuff.
#+BEGIN_SRC emacs-lisp
(use-package! org-mind-map
  :general
  (:keymaps 'org-mode-map
            :states 'normal
            :prefix my-leader
            "m e m" '(org-mind-map-write :wk "Export mind-map") ))
#+END_SRC
*** Org Drill
It makes sense to keep this around so as to leverage existing resources.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org-drill
  :after org)
#+END_SRC
*** Org Re-Reveal Additions
We will load a couple of helpers to get functionality closer to [[https://gitlab.com/oer/emacs-reveal/][emacs-reveal]].
This is apparently the ~org-ref~ for ~org-re-reveal~. For themes (e.g.
[[https://revealjs-themes.dzello.com/robot-lung.html][robot-lung]]), we have a new directory. We would also now keep a local copy of our ~revealjs~ setup.
#+begin_src emacs-lisp :tangle yes
(after! org-re-reveal
  (use-package! org-re-reveal-ref) ; fixes org-ref
  (setq reveal-extras (concat doom-private-dir "reveal/extras/")
        org-re-reveal-root (concat doom-private-dir "reveal/rjs/")
        sfeir-root (concat doom-private-dir "reveal/sfeir-school-theme/"))
)
#+end_src
Note that this needs to be updated manually since themes change.
*** Org GCal
Note that we configure this [[https://github.com/kidd/org-gcal.el][as per the README]] in the private configuration since all of these are very personal.
#+begin_src emacs-lisp :tangle yes
(use-package! org-gcal)
#+end_src
*** Hugo Settings
This should be set for everything. I like to keep the last modified date, but only consider things to be modified if 12 hours have passed.
#+BEGIN_SRC emacs-lisp
(setq org-hugo-auto-set-lastmod 't
      org-hugo-section "posts"
      org-hugo-suppress-lastmod-period 43200.0
      org-hugo-export-creator-string "Emacs 26.3 (Org mode 9.4 + ox-hugo + HaoZeke)"
)
#+END_SRC
*** Citeproc
I also like to have rational and numbered citations.
#+begin_src emacs-lisp
(after! ox-hugo
  (use-package! citeproc-org
    :config
    (citeproc-org-setup)
    (setq citeproc-org-org-bib-header "* References\n")
    )
  )
#+end_src
We will now lower the heading to the appropriate level. This is [[https://github.com/TimQuelch/emacs.d/blob/5c7b80890830d6833031a197801b7c6246f2e50e/config.org][kanged from TimQuelch]].
#+begin_src emacs-lisp
(after! citeproc-org
  (defun hz/min-headline-level ()
    (--> (org-element-parse-buffer)
         (org-element-map it 'headline (apply-partially #'org-element-property :level))
         (or it '(0))
         (-min it)))

  (defadvice! hz/citeproc-org-render-references (orig &rest args)
    :around 'citeproc-org-render-references
    (let* ((minlevel (hz/min-headline-level))
           (totallevel (max 1 minlevel))
           (citeproc-org-org-bib-header (concat (make-string totallevel ?*)
                                                (string-trim-left citeproc-org-org-bib-header "\\**"))))
      (apply orig args))))
#+end_src
** Syntax Highlighting
This section is for setting up major modes for various file formats which are
typically non-standard. These are matched by extensions.
*** TODO Misc Highlighting
**** Direnv
~direnv~ is essentially a specialized bash script. Until I have time to make a
proper font locking mode for it, this should suffice.
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (append '(("\\.envrc$" . shell-script-mode))
                              auto-mode-alist))
#+END_SRC
**** Fortran
By default, ~fortran-mode~ is used for ~f90~ files which is less than ideal.
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (append '(("\\.f90\\'" . f90-mode))
                              auto-mode-alist))
#+END_SRC
**** Vim
I still keep my ~vim~ dotfiles up to date...
#+BEGIN_SRC emacs-lisp
(use-package! vimrc-mode
  :mode "\\.vimrc\\'")
#+END_SRC
*** CPP Additions
**** Doxygen Support
#+begin_src emacs-lisp
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))
#+end_src
**** More Files
~inl~ files are often used for extended header definitions.
#+begin_src emacs-lisp
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                )
                              auto-mode-alist))
#+end_src
*** Meson
Mostly used with ~cpp~ files.
#+begin_src emacs-lisp
(use-package! meson-mode
  :mode "\\.build\\'"
  :config
  (add-hook!'meson-mode-hook 'company-mode)
  )
#+end_src
*** PKGBUILD Mode
This is the non ~doom~ way of loading this.
#+BEGIN_SRC emacs-lisp :tangle no
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode))
                              auto-mode-alist))
#+END_SRC
I use ~doom~. So.
#+BEGIN_SRC emacs-lisp
(use-package! pkgbuild-mode
  :mode "\\PKGBUILD")
#+END_SRC
*** LAMMPS Mode
**** No doom setup
For most users.
#+BEGIN_SRC emacs-lisp :tangle no
(autoload 'lammps-mode "lammps-mode.el" "LAMMPS mode." t)
(setq auto-mode-alist (append
                              '(("in\\.'" . lammps-mode))
                              '(("\\.lmp\\'" . lammps-mode))
                              auto-mode-alist
                              ))
#+END_SRC
**** Doom Version
With macros.
#+BEGIN_SRC emacs-lisp
(use-package! lammps-mode)
(setq auto-mode-alist (append
                              '(("in\\.'" . lammps-mode))
                              '(("\\.lmp\\'" . lammps-mode))
                              auto-mode-alist
                              ))
#+END_SRC
*** Pug Mode
Need better font locking everywhere.
#+BEGIN_SRC emacs-lisp
(use-package! pug-mode
  :mode "\\.pug\\'")
#+END_SRC
*** Conf Mode Files
The ~rc~ files are usually encountered while building android stuff. They are handled
well by ~conf-mode~. Turns out that ~vmd~ files also look just like ~conf-mode~ things...
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
             (append
             '(("\\.rc\\'" . conf-mode))
             '(("\\.vmd\\'" . conf-mode))
             auto-mode-alist
             ))
#+END_SRC
*** FORTRAN
Strangely the default settings do not pick up a bunch of fortran files.
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
             (append
             '(("\\.F90\\'" . fortran-mode))
             auto-mode-alist
             ))
#+END_SRC
*** JVM Languages
Since ~java+meghnada~, ~clojure~, and ~scala~ are covered by the standard ~doom~ config,
the rest of these need to be loaded here.
#+BEGIN_SRC emacs-lisp
(use-package! kotlin-mode
  :mode "\\.kt\\'")

(use-package! groovy-mode
  :mode "\\.groovy\\'")
#+END_SRC
*** Systemd
For all those user-units.
#+BEGIN_SRC emacs-lisp
(use-package! systemd
  :mode "\\.service\\'")
#+END_SRC
*** Dart Mode
Dart seems like a rather fun C-like language. Sort of fallen on the wayside what
with Golang and what not but still might be worth a shot.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! dart-mode
  :mode "\\.dart\\'")
#+END_SRC
*** SaltStack
I like having spell checks for everything.
#+BEGIN_SRC emacs-lisp
;; Load it
(use-package! salt-mode
  :config
;; Flyspell
(add-hook 'salt-mode-hook
        (lambda ()
            (flyspell-mode 1))))
#+END_SRC
*** Mathematica
Apparently, [[https://github.com/kawabata/wolfram-mode][wolfram-mode]] is the best for syntax highlighting.
#+BEGIN_SRC emacs-lisp
;; Load it
(use-package! wolfram-mode
  :config
  (setq mathematica-command-line "~/.local/bin/mash")
  (add-to-list 'org-src-lang-modes '("mathematica" . wolfram)))
#+END_SRC
** Aesthetics
*** Wakatime
Was removed from the core ~modules~ of ~doom-emacs~.
#+BEGIN_SRC emacs-lisp
(use-package! wakatime-mode
  :config
  (cond (IS-LINUX (setq wakatime-cli-path "/usr/bin/wakatime"))
        (IS-MAC (setq wakatime-cli-path "/run/current-system/sw/bin/wakatime")) ;; We assume nix-darwin
        )
  )
#+END_SRC
** Dockerfile Mode
[[https://github.com/spotify/dockerfile-mode][This]] package from spotify has support for building things as well as
highlighting Dockerfiles.
#+BEGIN_SRC emacs-lisp
(use-package! dockerfile-mode
  :mode "Dockerfile\\'"
  :config
  (put 'dockerfile-image-name 'safe-local-variable #'stringp)
  )
#+END_SRC
** Functions
*** Org-Export HTML with useful IDs
This minor mode [[https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors][from here]] is crucial to having sane ~reveal-js~ slides which don't keep jumping back to the title slide on every export.
#+BEGIN_SRC emacs-lisp
(define-minor-mode unpackaged/org-export-html-with-useful-ids-mode
  "Attempt to export Org as HTML with useful link IDs.
Instead of random IDs like \"#orga1b2c3\", use heading titles,
made unique when necessary."
  :global t
  (if unpackaged/org-export-html-with-useful-ids-mode
      (advice-add #'org-export-get-reference :override #'unpackaged/org-export-get-reference)
    (advice-remove #'org-export-get-reference #'unpackaged/org-export-get-reference)))

(defun unpackaged/org-export-get-reference (datum info)
  "Like `org-export-get-reference', except uses heading titles instead of random numbers."
  (let ((cache (plist-get info :internal-references)))
    (or (car (rassq datum cache))
        (let* ((crossrefs (plist-get info :crossrefs))
               (cells (org-export-search-cells datum))
               ;; Preserve any pre-existing association between
               ;; a search cell and a reference, i.e., when some
               ;; previously published document referenced a location
               ;; within current file (see
               ;; `org-publish-resolve-external-link').
               ;;
               ;; However, there is no guarantee that search cells are
               ;; unique, e.g., there might be duplicate custom ID or
               ;; two headings with the same title in the file.
               ;;
               ;; As a consequence, before re-using any reference to
               ;; an element or object, we check that it doesn't refer
               ;; to a previous element or object.
               (new (or (cl-some
                         (lambda (cell)
                           (let ((stored (cdr (assoc cell crossrefs))))
                             (when stored
                               (let ((old (org-export-format-reference stored)))
                                 (and (not (assoc old cache)) stored)))))
                         cells)
                        (when (org-element-property :raw-value datum)
                          ;; Heading with a title
                          (unpackaged/org-export-new-title-reference datum cache))
                        ;; NOTE: This probably breaks some Org Export
                        ;; feature, but if it does what I need, fine.
                        (org-export-format-reference
                         (org-export-new-reference cache))))
               (reference-string new))
          ;; Cache contains both data already associated to
          ;; a reference and in-use internal references, so as to make
          ;; unique references.
          (dolist (cell cells) (push (cons cell new) cache))
          ;; Retain a direct association between reference string and
          ;; DATUM since (1) not every object or element can be given
          ;; a search cell (2) it permits quick lookup.
          (push (cons reference-string datum) cache)
          (plist-put info :internal-references cache)
          reference-string))))

(defun unpackaged/org-export-new-title-reference (datum cache)
  "Return new reference for DATUM that is unique in CACHE."
  (cl-macrolet ((inc-suffixf (place)
                             `(progn
                                (string-match (rx bos
                                                  (minimal-match (group (1+ anything)))
                                                  (optional "--" (group (1+ digit)))
                                                  eos)
                                              ,place)
                                ;; HACK: `s1' instead of a gensym.
                                (-let* (((s1 suffix) (list (match-string 1 ,place)
                                                           (match-string 2 ,place)))
                                        (suffix (if suffix
                                                    (string-to-number suffix)
                                                  0)))
                                  (setf ,place (format "%s--%s" s1 (cl-incf suffix)))))))
    (let* ((title (org-element-property :raw-value datum))
           (ref (url-hexify-string (substring-no-properties title)))
           (parent (org-element-property :parent datum)))
      (while (--any (equal ref (car it))
                    cache)
        ;; Title not unique: make it so.
        (if parent
            ;; Append ancestor title.
            (setf title (concat (org-element-property :raw-value parent)
                                "--" title)
                  ref (url-hexify-string (substring-no-properties title))
                  parent (org-element-property :parent parent))
          ;; No more ancestors: add and increment a number.
          (inc-suffixf ref)))
      ref)))

#+END_SRC
*** Org-mode export pdf when saved
This one is to generate pdfs whenever a buffer is saved. Mainly taken from
[[https:emacs.stackexchange.com/questions/9893/how-can-i-export-to-latex-every-time-i-save-an-org-mode-buffer][this stack exchange question]].
#+BEGIN_SRC emacs-lisp
; Pdf
(defun haozeke/org-save-and-export-pdf ()
  (if (eq major-mode 'org-mode)
    (org-latex-export-to-pdf :async t)))
#+END_SRC

*** Org-mode export koma-letter
Since the ~koma-letter~ backend is separate, this needs a function as well.
#+BEGIN_SRC emacs-lisp
(defun haozeke/org-save-and-export-koma-letter-pdf ()
  (if (eq major-mode 'org-mode)
    (org-koma-letter-export-to-pdf)))
#+END_SRC
*** Org-mode export TeX
Similar to the one above, but ~tex~ generation is much faster and this way I can
keep editing my files without waiting for it to finish creating the ~pdf~.
#+BEGIN_SRC emacs-lisp
; LaTeX
(defun haozeke/org-save-and-export-latex ()
  (interactive)
  (if (eq major-mode 'org-mode)
    (org-latex-export-to-latex t)))
(defun haozeke/org-save-and-export-beamer ()
  (interactive)
  (if (eq major-mode 'org-mode)
    (org-beamer-export-to-latex t)))
#+END_SRC
*** TODO Caveats
- Minted needs to be setup.
- There are really a lot of optimizations to the above.
*** Helper function
Figure out if I can replicate this some other way. Taken from [[https://github.com/sam217pa/emacs-config][sam217pa's github repo]].
#+NAME: appList
#+BEGIN_SRC emacs-lisp
;; this function is used to append multiple elements to the list 'ox-latex
(defun append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR. The return value is the new value of LIST-VAR."
  (unless (consp elements) (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
(symbol-value list-var))
#+END_SRC
*** Async Command without Buffers
This supresses the output window. Useful for when I do async exports. From [[https://stackoverflow.com/questions/13901955/how-to-avoid-pop-up-of-async-shell-command-buffer-in-emacs][this question]].
#+BEGIN_SRC emacs-lisp
(defun async-shell-command-no-window
    (command)
  (interactive)
  (let
      ((display-buffer-alist
        (list
         (cons
          "\\*Async Shell Command\\*.*"
          (cons #'display-buffer-no-window nil)))))
    (async-shell-command
     command)))
#+END_SRC
*** Smarter Clang Formatting
This is taken from [[https://eklitzke.org/smarter-emacs-clang-format][this blog]].
#+BEGIN_SRC emacs-lisp
(defun haozeke/clang-format-buffer-conditional ()
(interactive)
  "Reformat buffer if .clang-format exists in the projectile root."
  (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
    (+format/buffer)))
#+END_SRC
*** Org-mode export to Markdown
This is a convinience function for working with ~nanoc~.
#+BEGIN_SRC emacs-lisp
(defun haozeke/org-pandoc-markdown (dir &optional pargs)
  "A wrapper to generate yaml metadata markdown files. Takes the output
  directory followed by pandoc arguments"
  (if (not (file-exists-p dir)) (make-directory dir))
  (async-shell-command-no-window
   (concat "pandoc -f org -t markdown -s " pargs " " (buffer-name) " -o "
           dir "/" (file-name-sans-extension (buffer-name)) ".md"))
    )
#+END_SRC
*** TODO Smartparens Wrapping
- [ ] Make this conditional and only when ~+smartparens~ is active
This is to define some more wrapping functions I use often (for markdown and
org-mode inline code):
#+BEGIN_SRC emacs-lisp
(defun sp-wrap-backtick ()
  "Wrap following sexp in backticks."
  (interactive)
  (sp-wrap-with-pair "`"))
(defun sp-wrap-tilda ()
  "Wrap following sexp in tildes."
  (interactive)
  (sp-wrap-with-pair "~"))
#+END_SRC
*** Sort words
From the Emacs Wiki.
#+begin_src emacs-lisp
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.

The variable `sort-fold-case' determines whether alphabetic case
affects the sort order.

See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+end_src
** Chat Clients
*** Matrix
Configuring the only ~emacs~ chat client I use.
#+begin_src emacs-lisp
;; (use-package! matrix-client
;;   :init
;;   :commands matrix-client-connect)
#+end_src
** Projects
These are to help setup org-mode workflows.
#+BEGIN_SRC emacs-lisp
; Make sure it's not set before adding to it
(unless (boundp 'org-publish-project-alist)
  (setq org-publish-project-alist nil))
#+END_SRC
*** dotDoom
This is used to generate plain HTML for my [[https://github.com/HaoZeke/dotDoom][dotDoom repo]]. The setup is taken from
the [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#fn.3][worg documentation]] and [[https://github.com/shishougang/wiki/blob/gh-pages/src/notes-init.el][this repository]]. It so turns out that we can host the
entire thing from the master branch on GitHub, but only if it is in a ~docs/~
subfolder... Plus ~org-html-export-to-html~ does not accept filenames which was
a real bummer.
#+BEGIN_SRC emacs-lisp
; dotDoom stuff
; This is a rather harmless useful variable
(setq dotdoom-root-dir "~/.config/doom/")
(setq dotdoom-publish-dir  (concat dotdoom-root-dir "docs"))
#+END_SRC
Now that the variables are set, we can move on to actually setting up the rest
of the export, this includes my own analytics and stuff. Infact maybe the
analytics would be better handled by offloading the damn thing to [[https://netlify.com][Netlify]],
though their recent changes to the TOS are worrying, so Microsoft owned GitHub
seems to be the better option for now.
**** Org Setup
It turns out that each part of the site which needs a separate publish function
needs to be added to the ~org-publish-project-alist~ so we will define each rule.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-publish-project-alist
      `("dotdoom-org"
         :base-directory ,dotdoom-root-dir
         :publishing-directory ,dotdoom-publish-dir
         :base-extension "org"
         :infojs-opt "view:t toc:t ltoc:t mouse:underline buttons:0 path:https://thomasf.github.io/solarized-css/org-info.min.js"
         :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://thomasf.github.io/solarized-css/solarized-dark.min.css\" />"
         :recursive t
         :publishing-function org-html-publish-to-html
         :auto-index nil ; I make my own from the readme.org
         ;; :html-head-include-default-style nil ; supresses the rest
         ;; :index-filename "README.org"
         ;; :index-title "index"
         ;; :auto-sitemap t                ; Generate sitemap.org automagically...
         ;; :sitemap-filename "index.org"  ; ... call it sitemap.org (it's the default)...
         ;; :sitemap-title "index"         ; ... with title 'sitemap'.
         :link-home "index.html"))
#+END_SRC
**** Static Content
We will at the very least need the ~.txt~ files to be transferred as is for
keybase.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-publish-project-alist
      `("dotdoom-static"
         :base-directory ,dotdoom-root-dir
         :publishing-directory ,dotdoom-publish-dir
         :base-extension "txt"
         :recursive nil
         :publishing-function org-publish-attachment))
#+END_SRC
**** Inherit and Combine
Now we compose the previous projects, keeping in mind the fact that they are in the
LTR order of preference.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-publish-project-alist
      `("dotdoom"
        :components ("dotdoom-org" "dotdoom-static")
        ))
#+END_SRC
*** Firestarter
Since I switched to [[https://rgoswami.me/posts/nix-r-devtools/][using Nix for R]] I needed a way to reload my system-wide
~config.nix~ [[https://depp.brause.cc/firestarter/][firestarter]] is the best of the auto-exec in my opinion, and would
probably replace a lot of my other hooks eventually as well.
#+BEGIN_SRC emacs-lisp
(use-package! firestarter
  :init
  (firestarter-mode)
  :config
  (setq firestarter-default-type t)
)
#+END_SRC
** Hooks
*** TODO Caveats
Move all the hooks to this section if possible.
*** Out of Focus Hook
Similar to ~neovim~ and its ~set autowrite~ and ~au FocusLost * update~:
#+begin_src emacs-lisp :tangle yes
;; Save on focus lost (The frame's focus that is...)
;; (defun save-all ()
;;   (interactive)
;;   (save-some-buffers t))

;; (add-hook 'focus-out-hook 'save-all)
#+end_src
From [[https://github.com/madstap/emacs/blob/master/customizations/editing.el][here]].
*** Before Save Hooks
**** CC Mode
Currently I only need to use the clang formatting hook here.
#+BEGIN_SRC emacs-lisp
; The interactive thing is REQUIRED
(defun haozeke/clang-format-buffer-smart-on-save ()
(interactive)
  "Add auto-save hook for clang-format-buffer-smart."
  (add-hook 'before-save-hook 'haozeke/clang-format-buffer-conditional nil t))
; This is a doom-emacs convinience macro
(add-hook! (c-mode c++-mode cc-mode) #'haozeke/clang-format-buffer-smart-on-save)
#+END_SRC
*** Disable Auto RDM
This conflicts with the ArchLinux ~systemctl --user start rdm~ thing.
#+BEGIN_SRC emacs-lisp
; Do not automatically try to run rdm
(remove-hook 'c-mode-common-hook #'+cc|init-rtags)
#+END_SRC
** Troubleshooting
These are strictly temporary hacks to resolve problems until they are fixed
upstream.
#+BEGIN_SRC emacs-lisp
(after! doom-themes
  (remove-hook 'doom-load-theme-hook #'doom-themes-treemacs-config))
#+END_SRC
* Sphinx and RsT
As mentioned in [[file:packages.org]], we have some packages which make life easier.
#+begin_src emacs-lisp
(use-package! ox-rst
:after org)
(use-package! sphinx-mode)
#+end_src
* R Helpers
This section is essentially to configure working with ~R~ above and beyond the
default ~ess~ configuration supplied by ~doom-emacs~.
*** R Markdown
Basically only ~poly-markdown~ for ~rmd~ files.
#+BEGIN_SRC emacs-lisp
;; Load
(use-package! poly-R
:config
(map! (:localleader
      :map polymode-mode-map
      :desc "Export"   "e" 'polymode-export
      :desc "Errors" "$" 'polymode-show-process-buffer
      :desc "Weave" "w" 'polymode-weave
      ;; (:prefix ("n" . "Navigation")
      ;;   :desc "Next" "n" . 'polymode-next-chunk
      ;;   :desc "Previous" "N" . 'polymode-previous-chunk)
      ;; (:prefix ("c" . "Chunks")
      ;;   :desc "Narrow" "n" . 'polymode-toggle-chunk-narrowing
      ;;   :desc "Kill" "k" . 'polymode-kill-chunk
      ;;   :desc "Mark-Extend" "m" . 'polymode-mark-or-extend-chunk)
      ))
  )
#+END_SRC
*** DONE Rmd to Rorg
The idea is to replace ~md~ completely with ~org~. Since ~polymode~ is pretty finicky for most of my ~org~ files, I will ensure it is only enabled for ~Rorg~ files.
#+BEGIN_SRC emacs-lisp
(use-package! poly-org
:config
(add-to-list 'auto-mode-alist '("\\.org" . org-mode))
(add-to-list 'auto-mode-alist '("\\.Rorg" . poly-org-mode))
(map! (:localleader
      :map polymode-mode-map
      :desc "Export"   "E" 'polymode-export
      :desc "Errors" "$" 'polymode-show-process-buffer
      :desc "Weave" "w" 'polymode-weave
      ))
  )
#+END_SRC
* Org LaTeX
Portions of this section are to be mirrored in [[file:local/async-ox.el][the async init]] file since. That's
also why here it's better to *not* use very _doom_ specific code. I think it
would be a lot better to just work these into a single literate block instead of
maintaining two different sets of syntax.
*** Async Config
This is essentially the same, only some extra packages are added.
#+BEGIN_SRC emacs-lisp :noweb yes :tangle local/async-ox.el
;;; autoExport.el --- For async exports -*- lexical-binding: t; -*-

(require 'package)
(setq package-enable-at-startup nil)
(package-initialize)

(require 'org)
(require 'ox)
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/org-mode/contrib/lisp/")
(require 'ox-koma-letter)
(require 'ox-beamer)

;; Org-Ref Stuff
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/org-ref/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/dash.el/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/helm.el/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/helm/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/build/helm/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/helm-bibtex/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/ivy/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/hydra/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/key-chord/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/s.el/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/f.el/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/pdf-tools/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/emacs-htmlize/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/parsebib/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/build/async/")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/biblio.el/")
(require 'org-ref)

;; Path addtion
<<orgPaths>>

;; Functions
<<appList>>
;; Feature parity with doom
<<orgConf>>
(provide 'autoExport)
;;; autoExport.el ends here
#+END_SRC
*** Path Additions
Due to my recent switch to using ~tlmgr~, I had to make some modifications to
the ~emacs~ path.
#+NAME: orgPaths
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2020/bin/x86_64-linux"))
(setq exec-path (append exec-path '("/usr/local/texlive/2020/bin/x86_64-linux")))
#+END_SRC
*** Config
This is the part which is exported normally.
#+NAME: orgConf
#+BEGIN_SRC emacs-lisp :noweb yes
(eval-after-load 'ox '(require 'ox-koma-letter))
(with-eval-after-load 'ox-latex
  <<tex_process>>
  <<common_pkgs>>
  <<tufte_book>>
  <<koma_art>>
  <<koma_rprt>>
)
#+END_SRC
** Shared Preferences
*** Compiler
It makes sense to use ~latexmk~ anyway. This way I can set sane defaults.
#+NAME: tex_process
#+BEGIN_SRC emacs-lisp :tangle no
;; Compiler
(setq org-latex-pdf-process (list "latexmk -shell-escape -f -pdfxe %f"))
#+END_SRC
*** Packages
Some of these are damn near universal given my set up, so they are declared here.
#+NAME: common_pkgs
#+BEGIN_SRC emacs-lisp :tangle no
;; Configuration
(add-to-list 'org-latex-packages-alist '("" "minted" "xcolor"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
  '(("bgcolor" "white") ("breaklines" "true") ("linenos" "true") ("style" "tango")))
#+END_SRC
** Export Templates
Most of the configuration is to be moved into the file snippets. However, class
definitions and other packages are still to be loaded here. Though here in the ~config.el~ I could use ~doom~ semantics and might as
well to keep things DRY, it appears that the [[file:local/async-ox.el][async file]] needs to keep things in
the old syntax.
*** KOMA Article
Inspired by the post [[https://tex.stackexchange.com/a/364982/130845][here]].
#+NAME: koma_art
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("koma-article" "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** KOMA Report
Inspired by the post [[https://tex.stackexchange.com/a/364982/130845][here]].
#+NAME: koma_rprt
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("koma-report" "\\documentclass{scrreprt}"))
#+END_SRC
*** Tufte Book
This is really ad-hoc right now and from [[https://www.reddit.com/r/emacs/comments/54g578/anyone_go_from_using_latex_to_org_mode/][this reddit thread]].
#+NAME: tufte_book
#+BEGIN_SRC emacs-lisp :tangle no
(append-to-list
 'org-latex-classes
 '(("tufte-book"
    "\\documentclass[a4paper, sfsidenotes, openany, justified]{tufte-book}"
    ("\\part{%s}" . "\\part*{%s}")
    ("\\chapter{%s}" . "\\chapter*{%s}")
    ("\\section{%s}" . "\\section*{%s}")
    ("utf8" . "utf8x")
    ("\\subsection{%s}" . "\\subsection*{%s}"))))
#+END_SRC
** LaTeX Preview for Org mode
Basically I need to see math and physics. Originally borrowed from [[https://emacs.stackexchange.com/questions/30341/how-do-i-customize-the-process-that-gets-triggered-in-org-preview-latex-fragment][this
stackexchange]] question.
**** Process
#+BEGIN_SRC emacs-lisp
'(org-preview-latex-process-alist
       (quote
       ((dvipng :programs
         ("lualatex" "dvipng")
         :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
 (dvisvgm :programs
          ("latex" "dvisvgm")
          :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
          (1.7 . 1.5)
          :latex-compiler
          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
          :image-converter
          ("dvisvgm %f -n -b min -c %S -o %O"))
 (imagemagick :programs
              ("latex" "convert")
              :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
              (1.0 . 1.0)
              :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("convert -density %D -trim -antialias %f -quality 100 %O")))))
#+END_SRC
**** Packages
These are required to view math properly.
** Math support
This is from [[https://www.reddit.com/r/emacs/comments/8tjgtu/cdlatex_and_general_latex_completion_with_company/][this reddit]] thread.
#+BEGIN_SRC emacs-lisp
(use-package! cdlatex
    :after (:any org-mode LaTeX-mode)
    :hook
    ((LaTeX-mode . turn-on-cdlatex)
     (org-mode . turn-on-org-cdlatex)))

(use-package! company-math
    :after (:any org-mode TeX-mode)
    :config
    (set-company-backend! 'org-mode 'company-math-symbols-latex)
    (set-company-backend! 'TeX-mode 'company-math-symbols-latex)
    (set-company-backend! 'org-mode 'company-latex-commands)
    (set-company-backend! 'TeX-mode 'company-latex-commands)
    (setq company-tooltip-align-annotations t)
    (setq company-math-allow-latex-symbols-in-faces t))
#+END_SRC
We would also like to set up the ~math-symbol-list~ unicode input [[https://www.emacswiki.org/emacs/TeXInputMethod][from here]].
#+begin_src emacs-lisp
(use-package! math-symbol-lists
  :config
  (quail-define-package "math" "UTF-8" "Ω" t)
  (quail-define-rules ; add whatever extra rules you want to define here...
   ("\\from"    #X2190)
   ("\\to"      #X2192)
   ("\\lhd"     #X22B2)
   ("\\rhd"     #X22B3)
   ("\\unlhd"   #X22B4)
   ("\\unrhd"   #X22B5))
  (mapc (lambda (x)
          (if (cddr x)
              (quail-defrule (cadr x) (car (cddr x)))))
        (append math-symbol-list-basic math-symbol-list-extended math-symbol-list-subscripts math-symbol-list-superscripts)))
#+end_src
** Prettier TeX buffers
From [[https://endlessparentheses.com/improving-latex-equations-with-font-lock.html][here]]. Reduces the size of inessential ~tex~.
#+begin_src emacs-lisp
(defface endless/unimportant-latex-face
  '((t :height 0.7
       :inherit font-lock-comment-face))
  "Face used on less relevant math commands."
  :group 'LaTeX-math)

(setq font-latex-user-keyword-classes
      '(("mathunimportant"
         ("left" "right"
          "big" "Big"
          "bigl" "bigr"
          "Bigl" "Bigr"
          "biggl" "biggr"
          "Biggl" "Biggr"
          "," "." ";" "!")
         endless/unimportant-latex-face
         noarg)))
#+end_src
** Babel Tabs
Evidently there was [[https://emacs.stackexchange.com/questions/24283/org-mode-converting-spaces-to-tabs-when-evaluating-source][some sort of re-indentation]] going on during the export
process which was breaking a lot of ~python~, this should fix that:
More generally, it is best set with ~# -*- org-src-preserve-indentation: t;
org-edit-src-content: 0; -*-~ on a per-file basis, however given that the
indentation is handled by the programming major mode, this is a good global
setting as well.
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t
      org-edit-src-content-indentation 0)
#+END_SRC
** Pandoc Babel
As fully described in [[https://rgoswami.me/posts/org-pandoc-babel/][this post]], I felt the need to export some common ~pandoc~
formats with ~babel~.
*** Restructured Text
#+begin_src emacs-lisp :tangle yes
(defun org-babel-execute:rst (body params)
  "Execute a block of rst code with org-babel.
This function is called by `org-babel-execute-src-block'."
  (let* ((result-params (split-string (or (cdr (assoc :results params)) "")))
       (in-file (org-babel-temp-file "rst-"))
       (cmdline (cdr (assoc :cmdline params)))
       (to (cdr (assoc :to params)))
       (template (cdr (assoc :template params)))
       (cmd (concat "pandoc"
                    " -t  org"
                    " -i " (org-babel-process-file-name in-file)
                    " -f rst "
                    " " cmdline)))
    (with-temp-file in-file (insert body))
    (message cmd)
    (shell-command-to-string cmd))) ;; Send to results

(defun org-babel-prep-session:rst (session params)
  "Return an error because rst does not support sessions."
  (error "rst does not support sessions"))
#+end_src
*** Markdown HTML
A helper execution method mostly for better formatting with ~org-gcal~, the method is described in [[https://rgoswami.me/posts/org-pandoc-babel/][this post]].
#+begin_src emacs-lisp :tangle yes
(defun org-babel-execute:mdhtml (body params)
  "Execute a block of rst code with org-babel.
This function is called by `org-babel-execute-src-block'."
  (let* ((result-params (split-string (or (cdr (assoc :results params)) "")))
         (in-file (org-babel-temp-file "mdhtml-"))
         (cmdline (cdr (assoc :cmdline params)))
         (to (cdr (assoc :to params)))
         (template (cdr (assoc :template params)))
         (cmd (concat "pandoc"
                      " -t  html"
                      " -i " (org-babel-process-file-name in-file)
                      " -f gfm "
                      " " cmdline)))
    (with-temp-file in-file (insert body))
    (message cmd)
    (shell-command-to-string cmd))) ;; Send to results

(defun org-babel-prep-session:mdhtml (session params)
  "Return an error because mdhtml does not support sessions."
  (error "mdhtml does not support sessions"))
#+end_src
** Flycheck Additions
These are basically meant to aid in development. The relevant linters are also
added here.
*** MELPA Helpers
This includes settings for both flycheck and the packages it needs.
#+BEGIN_SRC emacs-lisp
(use-package! flycheck-package
  :after flycheck
  :config (flycheck-package-setup))
#+END_SRC
* Notes
** noteYoda
+This is largely inspired from [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][this reddit comment]]. For clarity and extensibility this will be broken down into a per-package configuration. The heart of this is an [[https://rclone.org/mega/][rclone mega]] folder to manage all these transparently. With this setup links to the files are stored in [[https://www.zotero.org/][zotero]] and managed by [[https://github.com/jlegewie/zotfile][zotfile]].+ Now described in [[https://rgoswami.me/posts/org-note-workflow][this post]].
*** Org-Ref
[[https://github.com/jkitchin/org-ref][This]] seems like an ubiquitous choice for working with org files and references,
though quite a bit of the config here relates to [[https://github.com/tmalsburg/helm-bibtex/tree/file-field][helm-bibtex]]. *Commented*
sections are set in my ~private~ config.
#+BEGIN_SRC emacs-lisp
(use-package! org-ref
    ;; :init
    ; code to run before loading org-ref
    :config
    (setq
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
         org-ref-default-bibliography (list (concat (getenv "HOME") "/Documents/zotLib.bib"))
         org-ref-bibliography-notes (concat (getenv "HOME") "/Git/Gitlab/Mine/Notes/bibnotes.org")
         org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-directory (concat (getenv "HOME") "/Git/Gitlab/Mine/Notes/")
         org-ref-notes-function 'orb-edit-notes
    ))
#+END_SRC

Apparently, ~org-ref~ is also able to fetch ~pdf~ files when ~DOI~ or ~URL~
links are dragged onto the ~.bib~ file. However, since ~zotero~ will handle the
metadata, this remains to be considered.

Ivy is used exclusively throughout ~doom~, makes sense to use it here too, but I recently switched to ~helm~.
Turns out ~helm~ is probably faster for larger collections since it can be
asynchronous. Basically, this is because using the minibuffer, as ivy does is a
blocking action while the ~helm~ buffer may be opened asynchronously.
Name aside, [[https://github.com/tmalsburg/helm-bibtex][helm-bibtex]] also works for ~ivy~. Basically meant to interface with
bibliographies in general. However, since I'm using ~org-ref~, I won't be configuring or loading that anymore.
*** Helm Bibtex
For some reason, ~org-ref-notes~ isn't working very nicely, so the setup above prioritizes the ~helm-bibtex~ note-taking setup.
#+BEGIN_SRC emacs-lisp
(after! org-ref
  (setq
   bibtex-completion-notes-path (concat (getenv "HOME") "/Git/Gitlab/Mine/Notes/")
   bibtex-completion-bibliography (concat (getenv "HOME") "/Documents/zotLib.bib")
   bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files
   (concat
    "#+TITLE: ${title}\n"
    "#+ROAM_KEY: cite:${=key=}\n"
    "#+ROAM_TAGS: ${keywords}\n"
    "* TODO Notes\n"
    ":PROPERTIES:\n"
    ":Custom_ID: ${=key=}\n"
    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
    ":AUTHOR: ${author-abbrev}\n"
    ":JOURNAL: ${journaltitle}\n"
    ":DATE: ${date}\n"
    ":YEAR: ${year}\n"
    ":DOI: ${doi}\n"
    ":URL: ${url}\n"
    ":END:\n\n"
    )
   )
)
#+END_SRC

*** Org-Roam
Will also setup the ~org-roam-bibtex~ thing here.
As foretold in the last line, there are more settings for [[https://github.com/Zaeph/org-roam-bibtex][ORB]]. The template is
modified from [[https://github.com/zaeph/org-roam-bibtex/issues/4][here]].
#+begin_src emacs-lisp :tangle yes
 (use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
   '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS: 

- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))
#+end_src

*** Org-Noter
I decided to use [[https://github.com/weirdNox/org-noter][org-noter]] over the more commonly described [[https://github.com/rudolfochrist/interleave][interleave]] because
it has better support for working with multiple documents linked to one file.
#+BEGIN_SRC emacs-lisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the rclone mega
   org-noter-notes-search-path (list org_notes)
   )
  )
#+END_SRC

I have a rather involved setup in mind, so I have spun this section off from the
rest. The basic idea is to use [[https://github.com/jrblevin/deft][~deft~]] for short-to-long lookup notes, and
~org-capture~ templates with ~org-protocol~ for the rest. I am also considering
[[https://github.com/hasu/notdeft][notdeft]] since it might work better for what I want to achieve. Though it isn't
really part of a note taking workflow, I also intend to use [[https://github.com/anticodeninja/michel2][michel2]] to sync my
tasks...
** Org Capture
I am not really sure how to use these correctly, but I have the bare minimum
required for the [[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][Firefox browser extension]] (setup [[http://www.mediaonfire.com/blog/2017_07_21_org_protocol_firefox.html][from here]]), and a random
article thing.
*** Buffer Size
#+BEGIN_SRC emacs-lisp :results none
(set-popup-rule! "^CAPTURE-.*\\.org$" :size 0.5 :quit nil :select t :autosave t)
#+END_SRC
*** Functions
These are needed for ~org-capture~ alone for now.
#+BEGIN_SRC emacs-lisp
;; Fix some link issues
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
  )
#+END_SRC
*** Templates
This might get complicated but I am only trying to get the bare minimum for
~org-protocol~ right now. Will look into [[https://github.com/abo-abo/orca][orca]] and [[https://github.com/progfolio/doct/][doct]].
#+BEGIN_SRC emacs-lisp
;; Actually start using templates
(after! org-capture
  ;; Firefox
  (add-to-list 'org-capture-templates
               '("P" "Protocol" entry
                 (file+headline +org-capture-notes-file "Inbox")
                 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"
                 :prepend t
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("L" "Protocol Link" entry
                 (file+headline +org-capture-notes-file "Inbox")
                 "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n"
                 :prepend t
                 :kill-buffer t))
  ;; Misc
  (add-to-list 'org-capture-templates
         '("a"               ; key
           "Article"         ; name
           entry             ; type
           (file+headline +org-capture-notes-file "Article")  ; target
           "* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template
           :prepend t        ; properties
           :empty-lines 1    ; properties
           :created t        ; properties
           ))
)
#+END_SRC
**** HTML Parsing
The standard capture method isn't too great, but [[https://github.com/alphapapa/org-protocol-capture-html][this]] makes it better.

#+BEGIN_SRC emacs-lisp
(use-package! org-protocol-capture-html
  :after org-protocol
  :config
  (add-to-list 'org-capture-templates
               '("w"
                 "Web site"
                 entry
                 (file+headline +org-capture-notes-file "Website")  ; target
                 "* %a :website:\n\n%U %?\n\n%:initial")
               )
  )
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
#+ROAM_KEY: ${ref}
#+HUGO_SLUG: ${slug}
#+TITLE: ${title}
#+END_SRC
